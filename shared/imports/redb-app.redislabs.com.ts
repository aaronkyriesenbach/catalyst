// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * RedisEnterpriseDatabase is the Schema for the redisenterprisedatabases API
 *
 * @schema RedisEnterpriseDatabase
 */
export class RedisEnterpriseDatabase extends ApiObject {
  /**
   * Returns the apiVersion and kind for "RedisEnterpriseDatabase"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'app.redislabs.com/v1alpha1',
    kind: 'RedisEnterpriseDatabase',
  }

  /**
   * Renders a Kubernetes manifest for "RedisEnterpriseDatabase".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RedisEnterpriseDatabaseProps = {}): any {
    return {
      ...RedisEnterpriseDatabase.GVK,
      ...toJson_RedisEnterpriseDatabaseProps(props),
    };
  }

  /**
   * Defines a "RedisEnterpriseDatabase" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RedisEnterpriseDatabaseProps = {}) {
    super(scope, id, {
      ...RedisEnterpriseDatabase.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...RedisEnterpriseDatabase.GVK,
      ...toJson_RedisEnterpriseDatabaseProps(resolved),
    };
  }
}

/**
 * RedisEnterpriseDatabase is the Schema for the redisenterprisedatabases API
 *
 * @schema RedisEnterpriseDatabase
 */
export interface RedisEnterpriseDatabaseProps {
  /**
   * @schema RedisEnterpriseDatabase#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * RedisEnterpriseDatabaseSpec defines the desired state of RedisEnterpriseDatabase
   *
   * @schema RedisEnterpriseDatabase#spec
   */
  readonly spec?: RedisEnterpriseDatabaseSpec;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseProps(obj: RedisEnterpriseDatabaseProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RedisEnterpriseDatabaseSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * RedisEnterpriseDatabaseSpec defines the desired state of RedisEnterpriseDatabase
 *
 * @schema RedisEnterpriseDatabaseSpec
 */
export interface RedisEnterpriseDatabaseSpec {
  /**
   * Settings for database alerts
   *
   * @schema RedisEnterpriseDatabaseSpec#alertSettings
   */
  readonly alertSettings?: RedisEnterpriseDatabaseSpecAlertSettings;

  /**
   * Target for automatic database backups.
   *
   * @schema RedisEnterpriseDatabaseSpec#backup
   */
  readonly backup?: RedisEnterpriseDatabaseSpecBackup;

  /**
   * The Secrets containing TLS Client Certificate to use for Authentication
   *
   * @schema RedisEnterpriseDatabaseSpec#clientAuthenticationCertificates
   */
  readonly clientAuthenticationCertificates?: string[];

  /**
   * Internode encryption (INE) setting. An optional boolean setting, overriding a similar cluster-wide policy. If set to False, INE is guaranteed to be turned off for this DB (regardless of cluster-wide policy). If set to True, INE will be turned on, unless the capability is not supported by the DB ( in such a case we will get an error and database creation will fail). If left unspecified, will be disabled if internode encryption is not supported by the DB (regardless of cluster default). Deleting this property after explicitly setting its value shall have no effect.
   *
   * @schema RedisEnterpriseDatabaseSpec#dataInternodeEncryption
   */
  readonly dataInternodeEncryption?: boolean;

  /**
   * TCP port assigned to the database within the Redis Enterprise cluster. Must be unique across all databases in the Redis Enterprise cluster. Will be generated automatically if omitted. can not be changed after creation
   *
   * @schema RedisEnterpriseDatabaseSpec#databasePort
   */
  readonly databasePort?: number;

  /**
   * A custom port to be exposed by the database Services. Can be modified/added/removed after REDB creation. If set, it'll replace the default service port (namely, databasePort or defaultRedisPort).
   *
   * @schema RedisEnterpriseDatabaseSpec#databaseServicePort
   */
  readonly databaseServicePort?: number;

  /**
   * Name of the secret containing the database password (Redis databases only). The secret is created automatically if it does not exist. The password is stored under the "password" key in the secret. If creating the secret manually, create an opaque secret with the password under the "password" key. To disable authentication, set the value of the "password" key in the secret to an empty string. Note: For Active-Active databases, this secret is not created automatically. For memcached databases, use memcachedSaslSecretName instead.
   *
   * @schema RedisEnterpriseDatabaseSpec#databaseSecretName
   */
  readonly databaseSecretName?: string;

  /**
   * Allows connections with the default user. When disabled, the DatabaseSecret is not created or updated.
   *
   * @schema RedisEnterpriseDatabaseSpec#defaultUser
   */
  readonly defaultUser?: boolean;

  /**
   * Database eviction policy. See https://redis.io/docs/latest/operate/rs/databases/memory-performance/eviction-policy/
   *
   * @schema RedisEnterpriseDatabaseSpec#evictionPolicy
   */
  readonly evictionPolicy?: string;

  /**
   * Enables Auto Tiering (formerly Redis on Flash) for Redis databases only. Defaults to false.
   *
   * @default false.
   * @schema RedisEnterpriseDatabaseSpec#isRof
   */
  readonly isRof?: boolean;

  /**
   * Memory size for the database using formats like 100MB or 0.1GB. Minimum value is 100MB. For Auto Tiering (formerly Redis on Flash), this value represents RAM+Flash memory and must be at least 1GB.
   *
   * @schema RedisEnterpriseDatabaseSpec#memorySize
   */
  readonly memorySize?: string;

  /**
   * List of modules associated with the database. The list of valid modules for the specific cluster can be retrieved from the status of the REC object. Use the "name" and "versions" fields for the specific module configuration. If specifying an explicit version for a module, automatic modules versions upgrade must be disabled by setting the '.upgradeSpec.upgradeModulesToLatest' field in the REC to 'false'. Note that the option to specify module versions is deprecated, and will be removed in future releases.
   *
   * @schema RedisEnterpriseDatabaseSpec#modulesList
   */
  readonly modulesList?: RedisEnterpriseDatabaseSpecModulesList[];

  /**
   * Enables OSS Cluster mode. Note: Not all client libraries support OSS cluster mode.
   *
   * @schema RedisEnterpriseDatabaseSpec#ossCluster
   */
  readonly ossCluster?: boolean;

  /**
   * Database persistence policy for on-disk storage.
   *
   * @schema RedisEnterpriseDatabaseSpec#persistence
   */
  readonly persistence?: RedisEnterpriseDatabaseSpecPersistence;

  /**
   * Proxy policy for the database. Supported proxy policies are: single/all-master-shards/all-nodes When left blank, the default value will be chosen according to the value of ossCluster - single if disabled, all-master-shards when enabled
   *
   * @schema RedisEnterpriseDatabaseSpec#proxyPolicy
   */
  readonly proxyPolicy?: string;

  /**
   * Enables rack awareness for improved availability. See https://redis.io/docs/latest/operate/rs/clusters/configure/rack-zone-awareness/
   *
   * @schema RedisEnterpriseDatabaseSpec#rackAware
   */
  readonly rackAware?: boolean;

  /**
   * Connection to the Redis Enterprise Cluster.
   *
   * @schema RedisEnterpriseDatabaseSpec#redisEnterpriseCluster
   */
  readonly redisEnterpriseCluster?: RedisEnterpriseDatabaseSpecRedisEnterpriseCluster;

  /**
   * What databases to replicate from
   *
   * @schema RedisEnterpriseDatabaseSpec#replicaSources
   */
  readonly replicaSources?: RedisEnterpriseDatabaseSpecReplicaSources[];

  /**
   * Enables in-memory database replication for higher availability. Creates a replica shard for every master shard. Defaults to false.
   *
   * @default false.
   * @schema RedisEnterpriseDatabaseSpec#replication
   */
  readonly replication?: boolean;

  /**
   * List of Redis Enteprise ACL and Role bindings to apply
   *
   * @schema RedisEnterpriseDatabaseSpec#rolesPermissions
   */
  readonly rolesPermissions?: RedisEnterpriseDatabaseSpecRolesPermissions[];

  /**
   * Toggles database sharding for REAADBs (Active Active databases) and enabled by default. This field is blocked for REDB (non-Active Active databases) and sharding is toggled via the shardCount field - when shardCount is 1 this is disabled otherwise enabled.
   *
   * @schema RedisEnterpriseDatabaseSpec#shardingEnabled
   */
  readonly shardingEnabled?: boolean;

  /**
   * Number of database server-side shards.
   *
   * @schema RedisEnterpriseDatabaseSpec#shardCount
   */
  readonly shardCount?: number;

  /**
   * Shard placement strategy: "dense" or "sparse". dense: Shards reside on as few nodes as possible. sparse: Shards are distributed across as many nodes as possible.
   *
   * @schema RedisEnterpriseDatabaseSpec#shardsPlacement
   */
  readonly shardsPlacement?: RedisEnterpriseDatabaseSpecShardsPlacement;

  /**
   * Require TLS authenticated and encrypted connections to the database. enabled - all client and replication connections to the Database must use TLS. disabled - no incoming connection to the Database should use TLS. replica_ssl - databases that replicate from this one need to use TLS.
   *
   * @schema RedisEnterpriseDatabaseSpec#tlsMode
   */
  readonly tlsMode?: RedisEnterpriseDatabaseSpecTlsMode;

  /**
   * Database type: redis or memcached.
   *
   * @schema RedisEnterpriseDatabaseSpec#type
   */
  readonly type?: RedisEnterpriseDatabaseSpecType;

  /**
   * The size of the RAM portion of an Auto Tiering (formerly Redis on Flash) database. Similarly to "memorySize" use formats like 100MB, 0.1GB. It must be at least 10% of combined memory size (RAM and Flash), as specified by "memorySize".
   *
   * @schema RedisEnterpriseDatabaseSpec#rofRamSize
   */
  readonly rofRamSize?: string;

  /**
   * Redis OSS version. Version can be specified via <major.minor> prefix, or via channels - for existing databases - Upgrade Redis OSS version. For new databases - the version which the database will be created with. If set to 'major' - will always upgrade to the most recent major Redis version. If set to 'latest' - will always upgrade to the most recent Redis version. Depends on 'redisUpgradePolicy' - if you want to set the value to 'latest' for some databases, you must set redisUpgradePolicy on the cluster before. Possible values are 'major' or 'latest' When using upgrade - make sure to backup the database before. This value is used only for database type 'redis'
   *
   * @schema RedisEnterpriseDatabaseSpec#redisVersion
   */
  readonly redisVersion?: string;

  /**
   * Specifications for DB upgrade.
   *
   * @schema RedisEnterpriseDatabaseSpec#upgradeSpec
   */
  readonly upgradeSpec?: RedisEnterpriseDatabaseSpecUpgradeSpec;

  /**
   * Connection/ association to the Active-Active database.
   *
   * @schema RedisEnterpriseDatabaseSpec#activeActive
   */
  readonly activeActive?: RedisEnterpriseDatabaseSpecActiveActive;

  /**
   * Name of the secret containing credentials for memcached database authentication. Store credentials in an opaque secret with "username" and "password" keys. Note: Connections are not encrypted.
   *
   * @schema RedisEnterpriseDatabaseSpec#memcachedSaslSecretName
   */
  readonly memcachedSaslSecretName?: string;

  /**
   * Whether this database supports RESP3 protocol. Note - Deleting this property after explicitly setting its value shall have no effect. Please view the corresponding field in RS doc for more info.
   *
   * @schema RedisEnterpriseDatabaseSpec#resp3
   */
  readonly resp3?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpec(obj: RedisEnterpriseDatabaseSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'alertSettings': toJson_RedisEnterpriseDatabaseSpecAlertSettings(obj.alertSettings),
    'backup': toJson_RedisEnterpriseDatabaseSpecBackup(obj.backup),
    'clientAuthenticationCertificates': obj.clientAuthenticationCertificates?.map(y => y),
    'dataInternodeEncryption': obj.dataInternodeEncryption,
    'databasePort': obj.databasePort,
    'databaseServicePort': obj.databaseServicePort,
    'databaseSecretName': obj.databaseSecretName,
    'defaultUser': obj.defaultUser,
    'evictionPolicy': obj.evictionPolicy,
    'isRof': obj.isRof,
    'memorySize': obj.memorySize,
    'modulesList': obj.modulesList?.map(y => toJson_RedisEnterpriseDatabaseSpecModulesList(y)),
    'ossCluster': obj.ossCluster,
    'persistence': obj.persistence,
    'proxyPolicy': obj.proxyPolicy,
    'rackAware': obj.rackAware,
    'redisEnterpriseCluster': toJson_RedisEnterpriseDatabaseSpecRedisEnterpriseCluster(obj.redisEnterpriseCluster),
    'replicaSources': obj.replicaSources?.map(y => toJson_RedisEnterpriseDatabaseSpecReplicaSources(y)),
    'replication': obj.replication,
    'rolesPermissions': obj.rolesPermissions?.map(y => toJson_RedisEnterpriseDatabaseSpecRolesPermissions(y)),
    'shardingEnabled': obj.shardingEnabled,
    'shardCount': obj.shardCount,
    'shardsPlacement': obj.shardsPlacement,
    'tlsMode': obj.tlsMode,
    'type': obj.type,
    'rofRamSize': obj.rofRamSize,
    'redisVersion': obj.redisVersion,
    'upgradeSpec': toJson_RedisEnterpriseDatabaseSpecUpgradeSpec(obj.upgradeSpec),
    'activeActive': toJson_RedisEnterpriseDatabaseSpecActiveActive(obj.activeActive),
    'memcachedSaslSecretName': obj.memcachedSaslSecretName,
    'resp3': obj.resp3,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Settings for database alerts
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettings
 */
export interface RedisEnterpriseDatabaseSpecAlertSettings {
  /**
   * Periodic backup has been delayed for longer than specified threshold value [minutes]. -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettings#bdb_backup_delayed
   */
  readonly bdbBackupDelayed?: RedisEnterpriseDatabaseSpecAlertSettingsBdbBackupDelayed;

  /**
   * Active-active source - sync lag is higher than specified threshold value [seconds] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettings#bdb_crdt_src_high_syncer_lag
   */
  readonly bdbCrdtSrcHighSyncerLag?: RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcHighSyncerLag;

  /**
   * Active-active source - sync has connection error while trying to connect replica source -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettings#bdb_crdt_src_syncer_connection_error
   */
  readonly bdbCrdtSrcSyncerConnectionError?: RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerConnectionError;

  /**
   * Active-active source - sync encountered in general error -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettings#bdb_crdt_src_syncer_general_error
   */
  readonly bdbCrdtSrcSyncerGeneralError?: RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerGeneralError;

  /**
   * Latency is higher than specified threshold value [micro-sec] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettings#bdb_high_latency
   */
  readonly bdbHighLatency?: RedisEnterpriseDatabaseSpecAlertSettingsBdbHighLatency;

  /**
   * Throughput is higher than specified threshold value [requests / sec.] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettings#bdb_high_throughput
   */
  readonly bdbHighThroughput?: RedisEnterpriseDatabaseSpecAlertSettingsBdbHighThroughput;

  /**
   * An alert for state-machines that are running for too long -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettings#bdb_long_running_action
   */
  readonly bdbLongRunningAction?: RedisEnterpriseDatabaseSpecAlertSettingsBdbLongRunningAction;

  /**
   * Throughput is lower than specified threshold value [requests / sec.] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettings#bdb_low_throughput
   */
  readonly bdbLowThroughput?: RedisEnterpriseDatabaseSpecAlertSettingsBdbLowThroughput;

  /**
   * Dataset RAM overhead of a shard has reached the threshold value [% of its RAM limit] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettings#bdb_ram_dataset_overhead
   */
  readonly bdbRamDatasetOverhead?: RedisEnterpriseDatabaseSpecAlertSettingsBdbRamDatasetOverhead;

  /**
   * Percent of values kept in a shard's RAM is lower than [% of its key count] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettings#bdb_ram_values
   */
  readonly bdbRamValues?: RedisEnterpriseDatabaseSpecAlertSettingsBdbRamValues;

  /**
   * Replica-of source - sync lag is higher than specified threshold value [seconds] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettings#bdb_replica_src_high_syncer_lag
   */
  readonly bdbReplicaSrcHighSyncerLag?: RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcHighSyncerLag;

  /**
   * Replica-of source - sync has connection error while trying to connect replica source -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettings#bdb_replica_src_syncer_connection_error
   */
  readonly bdbReplicaSrcSyncerConnectionError?: RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcSyncerConnectionError;

  /**
   * Number of values kept in a shard's RAM is lower than [values] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettings#bdb_shard_num_ram_values
   */
  readonly bdbShardNumRamValues?: RedisEnterpriseDatabaseSpecAlertSettingsBdbShardNumRamValues;

  /**
   * Dataset size has reached the threshold value [% of the memory limit] expected fields: -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettings#bdb_size
   */
  readonly bdbSize?: RedisEnterpriseDatabaseSpecAlertSettingsBdbSize;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettings' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettings(obj: RedisEnterpriseDatabaseSpecAlertSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bdb_backup_delayed': toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbBackupDelayed(obj.bdbBackupDelayed),
    'bdb_crdt_src_high_syncer_lag': toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcHighSyncerLag(obj.bdbCrdtSrcHighSyncerLag),
    'bdb_crdt_src_syncer_connection_error': toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerConnectionError(obj.bdbCrdtSrcSyncerConnectionError),
    'bdb_crdt_src_syncer_general_error': toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerGeneralError(obj.bdbCrdtSrcSyncerGeneralError),
    'bdb_high_latency': toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbHighLatency(obj.bdbHighLatency),
    'bdb_high_throughput': toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbHighThroughput(obj.bdbHighThroughput),
    'bdb_long_running_action': toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbLongRunningAction(obj.bdbLongRunningAction),
    'bdb_low_throughput': toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbLowThroughput(obj.bdbLowThroughput),
    'bdb_ram_dataset_overhead': toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbRamDatasetOverhead(obj.bdbRamDatasetOverhead),
    'bdb_ram_values': toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbRamValues(obj.bdbRamValues),
    'bdb_replica_src_high_syncer_lag': toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcHighSyncerLag(obj.bdbReplicaSrcHighSyncerLag),
    'bdb_replica_src_syncer_connection_error': toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcSyncerConnectionError(obj.bdbReplicaSrcSyncerConnectionError),
    'bdb_shard_num_ram_values': toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbShardNumRamValues(obj.bdbShardNumRamValues),
    'bdb_size': toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbSize(obj.bdbSize),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Target for automatic database backups.
 *
 * @schema RedisEnterpriseDatabaseSpecBackup
 */
export interface RedisEnterpriseDatabaseSpecBackup {
  /**
   * @schema RedisEnterpriseDatabaseSpecBackup#abs
   */
  readonly abs?: RedisEnterpriseDatabaseSpecBackupAbs;

  /**
   * @schema RedisEnterpriseDatabaseSpecBackup#ftp
   */
  readonly ftp?: RedisEnterpriseDatabaseSpecBackupFtp;

  /**
   * GoogleStorage
   *
   * @schema RedisEnterpriseDatabaseSpecBackup#gcs
   */
  readonly gcs?: RedisEnterpriseDatabaseSpecBackupGcs;

  /**
   * Backup Interval in seconds
   *
   * @schema RedisEnterpriseDatabaseSpecBackup#interval
   */
  readonly interval?: number;

  /**
   * MountPointStorage
   *
   * @schema RedisEnterpriseDatabaseSpecBackup#mount
   */
  readonly mount?: RedisEnterpriseDatabaseSpecBackupMount;

  /**
   * @schema RedisEnterpriseDatabaseSpecBackup#s3
   */
  readonly s3?: RedisEnterpriseDatabaseSpecBackupS3;

  /**
   * @schema RedisEnterpriseDatabaseSpecBackup#sftp
   */
  readonly sftp?: RedisEnterpriseDatabaseSpecBackupSftp;

  /**
   * @schema RedisEnterpriseDatabaseSpecBackup#swift
   */
  readonly swift?: RedisEnterpriseDatabaseSpecBackupSwift;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecBackup' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecBackup(obj: RedisEnterpriseDatabaseSpecBackup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'abs': toJson_RedisEnterpriseDatabaseSpecBackupAbs(obj.abs),
    'ftp': toJson_RedisEnterpriseDatabaseSpecBackupFtp(obj.ftp),
    'gcs': toJson_RedisEnterpriseDatabaseSpecBackupGcs(obj.gcs),
    'interval': obj.interval,
    'mount': toJson_RedisEnterpriseDatabaseSpecBackupMount(obj.mount),
    's3': toJson_RedisEnterpriseDatabaseSpecBackupS3(obj.s3),
    'sftp': toJson_RedisEnterpriseDatabaseSpecBackupSftp(obj.sftp),
    'swift': toJson_RedisEnterpriseDatabaseSpecBackupSwift(obj.swift),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Redis Enterprise module (see https://redis.io/docs/latest/develop/reference/modules/)
 *
 * @schema RedisEnterpriseDatabaseSpecModulesList
 */
export interface RedisEnterpriseDatabaseSpecModulesList {
  /**
   * Module command line arguments e.g. VKEY_MAX_ENTITY_COUNT 30 30
   *
   * @schema RedisEnterpriseDatabaseSpecModulesList#config
   */
  readonly config?: string;

  /**
   * The name of the module, e.g. "search" or "ReJSON". The complete list of modules available in the cluster can be retrieved from the '.status.modules' field in the REC.
   *
   * @schema RedisEnterpriseDatabaseSpecModulesList#name
   */
  readonly name: string;

  /**
   * The semantic version of the module, e.g. '1.6.12'. Optional for REDB, must be set for REAADB. Note that this field is deprecated, and will be removed in future releases.
   *
   * @schema RedisEnterpriseDatabaseSpecModulesList#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecModulesList' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecModulesList(obj: RedisEnterpriseDatabaseSpecModulesList | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'config': obj.config,
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Database persistence policy for on-disk storage.
 *
 * @schema RedisEnterpriseDatabaseSpecPersistence
 */
export enum RedisEnterpriseDatabaseSpecPersistence {
  /** disabled */
  DISABLED = "disabled",
  /** aofEverySecond */
  AOF_EVERY_SECOND = "aofEverySecond",
  /** aofAlways */
  AOF_ALWAYS = "aofAlways",
  /** snapshotEvery1Hour */
  SNAPSHOT_EVERY1_HOUR = "snapshotEvery1Hour",
  /** snapshotEvery6Hour */
  SNAPSHOT_EVERY6_HOUR = "snapshotEvery6Hour",
  /** snapshotEvery12Hour */
  SNAPSHOT_EVERY12_HOUR = "snapshotEvery12Hour",
}

/**
 * Connection to the Redis Enterprise Cluster.
 *
 * @schema RedisEnterpriseDatabaseSpecRedisEnterpriseCluster
 */
export interface RedisEnterpriseDatabaseSpecRedisEnterpriseCluster {
  /**
   * The name of the Redis Enterprise Cluster where the database should be stored.
   *
   * @schema RedisEnterpriseDatabaseSpecRedisEnterpriseCluster#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecRedisEnterpriseCluster' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecRedisEnterpriseCluster(obj: RedisEnterpriseDatabaseSpecRedisEnterpriseCluster | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema RedisEnterpriseDatabaseSpecReplicaSources
 */
export interface RedisEnterpriseDatabaseSpecReplicaSources {
  /**
   * Secret that defines the client certificate and key used by the syncer in the target database cluster. The secret must have 2 keys in its map: "cert" which is the PEM encoded certificate, and "key" which is the PEM encoded private key.
   *
   * @schema RedisEnterpriseDatabaseSpecReplicaSources#clientKeySecret
   */
  readonly clientKeySecret?: string;

  /**
   * GZIP compression level (0-6) to use for replication.
   *
   * @schema RedisEnterpriseDatabaseSpecReplicaSources#compression
   */
  readonly compression?: number;

  /**
   * The name of the resource from which the source database URI is derived. The type of resource must match the type specified in the ReplicaSourceType field.
   *
   * @schema RedisEnterpriseDatabaseSpecReplicaSources#replicaSourceName
   */
  readonly replicaSourceName: string;

  /**
   * The type of resource from which the source database URI is derived. If set to 'SECRET', the source database URI is derived from the secret named in the ReplicaSourceName field. The secret must have a key named 'uri' that defines the URI of the source database in the form of 'redis://...'. The type of secret (kubernetes, vault, ...) is determined by the secret mechanism used by the underlying REC object. If set to 'REDB', the source database URI is derived from the RedisEnterpriseDatabase resource named in the ReplicaSourceName field.
   *
   * @schema RedisEnterpriseDatabaseSpecReplicaSources#replicaSourceType
   */
  readonly replicaSourceType: string;

  /**
   * Secret that defines the server certificate used by the proxy in the source database cluster. The secret must have 1 key in its map: "cert" which is the PEM encoded certificate.
   *
   * @schema RedisEnterpriseDatabaseSpecReplicaSources#serverCertSecret
   */
  readonly serverCertSecret?: string;

  /**
   * TLS SNI name to use for the replication link.
   *
   * @schema RedisEnterpriseDatabaseSpecReplicaSources#tlsSniName
   */
  readonly tlsSniName?: string;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecReplicaSources' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecReplicaSources(obj: RedisEnterpriseDatabaseSpecReplicaSources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientKeySecret': obj.clientKeySecret,
    'compression': obj.compression,
    'replicaSourceName': obj.replicaSourceName,
    'replicaSourceType': obj.replicaSourceType,
    'serverCertSecret': obj.serverCertSecret,
    'tlsSniName': obj.tlsSniName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Redis Enterprise Role and ACL Binding
 *
 * @schema RedisEnterpriseDatabaseSpecRolesPermissions
 */
export interface RedisEnterpriseDatabaseSpecRolesPermissions {
  /**
   * Acl Name of RolePermissionType
   *
   * @schema RedisEnterpriseDatabaseSpecRolesPermissions#acl
   */
  readonly acl: string;

  /**
   * Role Name of RolePermissionType
   *
   * @schema RedisEnterpriseDatabaseSpecRolesPermissions#role
   */
  readonly role: string;

  /**
   * Type of Redis Enterprise Database Role Permission
   *
   * @schema RedisEnterpriseDatabaseSpecRolesPermissions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecRolesPermissions' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecRolesPermissions(obj: RedisEnterpriseDatabaseSpecRolesPermissions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'acl': obj.acl,
    'role': obj.role,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Shard placement strategy: "dense" or "sparse". dense: Shards reside on as few nodes as possible. sparse: Shards are distributed across as many nodes as possible.
 *
 * @schema RedisEnterpriseDatabaseSpecShardsPlacement
 */
export enum RedisEnterpriseDatabaseSpecShardsPlacement {
  /** dense */
  DENSE = "dense",
  /** sparse */
  SPARSE = "sparse",
}

/**
 * Require TLS authenticated and encrypted connections to the database. enabled - all client and replication connections to the Database must use TLS. disabled - no incoming connection to the Database should use TLS. replica_ssl - databases that replicate from this one need to use TLS.
 *
 * @schema RedisEnterpriseDatabaseSpecTlsMode
 */
export enum RedisEnterpriseDatabaseSpecTlsMode {
  /** disabled */
  DISABLED = "disabled",
  /** enabled */
  ENABLED = "enabled",
  /** replica_ssl */
  REPLICA_UNDERSCORE_SSL = "replica_ssl",
}

/**
 * Database type: redis or memcached.
 *
 * @schema RedisEnterpriseDatabaseSpecType
 */
export enum RedisEnterpriseDatabaseSpecType {
  /** redis */
  REDIS = "redis",
  /** memcached */
  MEMCACHED = "memcached",
}

/**
 * Specifications for DB upgrade.
 *
 * @schema RedisEnterpriseDatabaseSpecUpgradeSpec
 */
export interface RedisEnterpriseDatabaseSpecUpgradeSpec {
  /**
   * DEPRECATED Upgrades the modules to the latest version that supports the DB version during a DB upgrade action, to upgrade the DB version view the 'redisVersion' field. Notes - All modules must be without specifying the version. in addition, This field is currently not supported for Active-Active databases. The default is true
   *
   * @schema RedisEnterpriseDatabaseSpecUpgradeSpec#upgradeModulesToLatest
   */
  readonly upgradeModulesToLatest: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecUpgradeSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecUpgradeSpec(obj: RedisEnterpriseDatabaseSpecUpgradeSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'upgradeModulesToLatest': obj.upgradeModulesToLatest,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Connection/ association to the Active-Active database.
 *
 * @schema RedisEnterpriseDatabaseSpecActiveActive
 */
export interface RedisEnterpriseDatabaseSpecActiveActive {
  /**
   * The the corresponding Active-Active database name, Redis Enterprise Active Active Database custom resource name, this Resource is associated with. In case this resource is created manually at the active active database creation this field must be filled via the user, otherwise, the operator will assign this field automatically. Note: this feature is currently unsupported.
   *
   * @schema RedisEnterpriseDatabaseSpecActiveActive#name
   */
  readonly name: string;

  /**
   * The corresponding participating cluster name, Redis Enterprise Remote Cluster custom resource name, in the Active-Active database, In case this resource is created manually at the active active database creation this field must be filled via the user, otherwise, the operator will assign this field automatically. Note: this feature is currently unsupported.
   *
   * @schema RedisEnterpriseDatabaseSpecActiveActive#participatingClusterName
   */
  readonly participatingClusterName: string;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecActiveActive' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecActiveActive(obj: RedisEnterpriseDatabaseSpecActiveActive | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'participatingClusterName': obj.participatingClusterName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Periodic backup has been delayed for longer than specified threshold value [minutes]. -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbBackupDelayed
 */
export interface RedisEnterpriseDatabaseSpecAlertSettingsBdbBackupDelayed {
  /**
   * Alert enabled or disabled
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbBackupDelayed#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettingsBdbBackupDelayed' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbBackupDelayed(obj: RedisEnterpriseDatabaseSpecAlertSettingsBdbBackupDelayed | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Active-active source - sync lag is higher than specified threshold value [seconds] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcHighSyncerLag
 */
export interface RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcHighSyncerLag {
  /**
   * Alert enabled or disabled
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcHighSyncerLag#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcHighSyncerLag' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcHighSyncerLag(obj: RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcHighSyncerLag | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Active-active source - sync has connection error while trying to connect replica source -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerConnectionError
 */
export interface RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerConnectionError {
  /**
   * Alert enabled or disabled
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerConnectionError#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerConnectionError' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerConnectionError(obj: RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerConnectionError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Active-active source - sync encountered in general error -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerGeneralError
 */
export interface RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerGeneralError {
  /**
   * Alert enabled or disabled
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerGeneralError#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerGeneralError' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerGeneralError(obj: RedisEnterpriseDatabaseSpecAlertSettingsBdbCrdtSrcSyncerGeneralError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Latency is higher than specified threshold value [micro-sec] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbHighLatency
 */
export interface RedisEnterpriseDatabaseSpecAlertSettingsBdbHighLatency {
  /**
   * Alert enabled or disabled
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbHighLatency#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettingsBdbHighLatency' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbHighLatency(obj: RedisEnterpriseDatabaseSpecAlertSettingsBdbHighLatency | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Throughput is higher than specified threshold value [requests / sec.] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbHighThroughput
 */
export interface RedisEnterpriseDatabaseSpecAlertSettingsBdbHighThroughput {
  /**
   * Alert enabled or disabled
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbHighThroughput#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettingsBdbHighThroughput' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbHighThroughput(obj: RedisEnterpriseDatabaseSpecAlertSettingsBdbHighThroughput | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * An alert for state-machines that are running for too long -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbLongRunningAction
 */
export interface RedisEnterpriseDatabaseSpecAlertSettingsBdbLongRunningAction {
  /**
   * Alert enabled or disabled
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbLongRunningAction#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettingsBdbLongRunningAction' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbLongRunningAction(obj: RedisEnterpriseDatabaseSpecAlertSettingsBdbLongRunningAction | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Throughput is lower than specified threshold value [requests / sec.] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbLowThroughput
 */
export interface RedisEnterpriseDatabaseSpecAlertSettingsBdbLowThroughput {
  /**
   * Alert enabled or disabled
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbLowThroughput#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettingsBdbLowThroughput' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbLowThroughput(obj: RedisEnterpriseDatabaseSpecAlertSettingsBdbLowThroughput | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Dataset RAM overhead of a shard has reached the threshold value [% of its RAM limit] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbRamDatasetOverhead
 */
export interface RedisEnterpriseDatabaseSpecAlertSettingsBdbRamDatasetOverhead {
  /**
   * Alert enabled or disabled
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbRamDatasetOverhead#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettingsBdbRamDatasetOverhead' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbRamDatasetOverhead(obj: RedisEnterpriseDatabaseSpecAlertSettingsBdbRamDatasetOverhead | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Percent of values kept in a shard's RAM is lower than [% of its key count] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbRamValues
 */
export interface RedisEnterpriseDatabaseSpecAlertSettingsBdbRamValues {
  /**
   * Alert enabled or disabled
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbRamValues#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettingsBdbRamValues' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbRamValues(obj: RedisEnterpriseDatabaseSpecAlertSettingsBdbRamValues | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Replica-of source - sync lag is higher than specified threshold value [seconds] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcHighSyncerLag
 */
export interface RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcHighSyncerLag {
  /**
   * Alert enabled or disabled
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcHighSyncerLag#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcHighSyncerLag' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcHighSyncerLag(obj: RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcHighSyncerLag | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Replica-of source - sync has connection error while trying to connect replica source -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcSyncerConnectionError
 */
export interface RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcSyncerConnectionError {
  /**
   * Alert enabled or disabled
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcSyncerConnectionError#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcSyncerConnectionError' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcSyncerConnectionError(obj: RedisEnterpriseDatabaseSpecAlertSettingsBdbReplicaSrcSyncerConnectionError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Number of values kept in a shard's RAM is lower than [values] -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbShardNumRamValues
 */
export interface RedisEnterpriseDatabaseSpecAlertSettingsBdbShardNumRamValues {
  /**
   * Alert enabled or disabled
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbShardNumRamValues#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettingsBdbShardNumRamValues' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbShardNumRamValues(obj: RedisEnterpriseDatabaseSpecAlertSettingsBdbShardNumRamValues | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Dataset size has reached the threshold value [% of the memory limit] expected fields: -Note threshold is commented (allow string/int/float and support backwards compatibility) but is required
 *
 * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbSize
 */
export interface RedisEnterpriseDatabaseSpecAlertSettingsBdbSize {
  /**
   * Alert enabled or disabled
   *
   * @schema RedisEnterpriseDatabaseSpecAlertSettingsBdbSize#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecAlertSettingsBdbSize' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecAlertSettingsBdbSize(obj: RedisEnterpriseDatabaseSpecAlertSettingsBdbSize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema RedisEnterpriseDatabaseSpecBackupAbs
 */
export interface RedisEnterpriseDatabaseSpecBackupAbs {
  /**
   * The name of the K8s secret that holds ABS credentials. The secret must contain the keys "AccountName" and "AccountKey", and these must hold the corresponding credentials
   *
   * @schema RedisEnterpriseDatabaseSpecBackupAbs#absSecretName
   */
  readonly absSecretName: string;

  /**
   * Azure Blob Storage container name.
   *
   * @schema RedisEnterpriseDatabaseSpecBackupAbs#container
   */
  readonly container: string;

  /**
   * Optional. Azure Blob Storage subdir under container.
   *
   * @schema RedisEnterpriseDatabaseSpecBackupAbs#subdir
   */
  readonly subdir?: string;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecBackupAbs' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecBackupAbs(obj: RedisEnterpriseDatabaseSpecBackupAbs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'absSecretName': obj.absSecretName,
    'container': obj.container,
    'subdir': obj.subdir,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema RedisEnterpriseDatabaseSpecBackupFtp
 */
export interface RedisEnterpriseDatabaseSpecBackupFtp {
  /**
   * a URI of the ftps://[USER[:PASSWORD]@]HOST[:PORT]/PATH[/]
   *
   * @schema RedisEnterpriseDatabaseSpecBackupFtp#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecBackupFtp' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecBackupFtp(obj: RedisEnterpriseDatabaseSpecBackupFtp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * GoogleStorage
 *
 * @schema RedisEnterpriseDatabaseSpecBackupGcs
 */
export interface RedisEnterpriseDatabaseSpecBackupGcs {
  /**
   * Google Storage bucket name.
   *
   * @schema RedisEnterpriseDatabaseSpecBackupGcs#bucketName
   */
  readonly bucketName: string;

  /**
   * The name of the K8s secret that holds the Google Cloud Storage credentials. The secret must contain the keys "CLIENT_ID", "PRIVATE_KEY", "PRIVATE_KEY_ID", "CLIENT_EMAIL" and these must hold the corresponding credentials. The keys should correspond to the values in the key JSON.
   *
   * @schema RedisEnterpriseDatabaseSpecBackupGcs#gcsSecretName
   */
  readonly gcsSecretName: string;

  /**
   * Optional. Google Storage subdir under bucket.
   *
   * @schema RedisEnterpriseDatabaseSpecBackupGcs#subdir
   */
  readonly subdir?: string;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecBackupGcs' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecBackupGcs(obj: RedisEnterpriseDatabaseSpecBackupGcs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketName': obj.bucketName,
    'gcsSecretName': obj.gcsSecretName,
    'subdir': obj.subdir,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * MountPointStorage
 *
 * @schema RedisEnterpriseDatabaseSpecBackupMount
 */
export interface RedisEnterpriseDatabaseSpecBackupMount {
  /**
   * Path to the local mount point. You must create the mount point on all nodes, and the redislabs:redislabs user must have read and write permissions on the local mount point.
   *
   * @schema RedisEnterpriseDatabaseSpecBackupMount#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecBackupMount' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecBackupMount(obj: RedisEnterpriseDatabaseSpecBackupMount | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema RedisEnterpriseDatabaseSpecBackupS3
 */
export interface RedisEnterpriseDatabaseSpecBackupS3 {
  /**
   * The name of the K8s secret that holds the AWS credentials. The secret must contain the keys "AWS_ACCESS_KEY_ID" and "AWS_SECRET_ACCESS_KEY", and these must hold the corresponding credentials.
   *
   * @schema RedisEnterpriseDatabaseSpecBackupS3#awsSecretName
   */
  readonly awsSecretName: string;

  /**
   * Amazon S3 bucket name.
   *
   * @schema RedisEnterpriseDatabaseSpecBackupS3#bucketName
   */
  readonly bucketName: string;

  /**
   * Optional. Amazon S3 subdir under bucket.
   *
   * @schema RedisEnterpriseDatabaseSpecBackupS3#subdir
   */
  readonly subdir?: string;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecBackupS3' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecBackupS3(obj: RedisEnterpriseDatabaseSpecBackupS3 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsSecretName': obj.awsSecretName,
    'bucketName': obj.bucketName,
    'subdir': obj.subdir,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema RedisEnterpriseDatabaseSpecBackupSftp
 */
export interface RedisEnterpriseDatabaseSpecBackupSftp {
  /**
   * SFTP url
   *
   * @schema RedisEnterpriseDatabaseSpecBackupSftp#sftp_url
   */
  readonly sftpUrl: string;

  /**
   * The name of the K8s secret that holds SFTP credentials. The secret must contain the "Key" key, which is the SSH private key for connecting to the sftp server.
   *
   * @schema RedisEnterpriseDatabaseSpecBackupSftp#sftpSecretName
   */
  readonly sftpSecretName: string;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecBackupSftp' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecBackupSftp(obj: RedisEnterpriseDatabaseSpecBackupSftp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sftp_url': obj.sftpUrl,
    'sftpSecretName': obj.sftpSecretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema RedisEnterpriseDatabaseSpecBackupSwift
 */
export interface RedisEnterpriseDatabaseSpecBackupSwift {
  /**
   * Swift service authentication URL.
   *
   * @schema RedisEnterpriseDatabaseSpecBackupSwift#auth_url
   */
  readonly authUrl: string;

  /**
   * Swift object store container for storing the backup files.
   *
   * @schema RedisEnterpriseDatabaseSpecBackupSwift#container
   */
  readonly container: string;

  /**
   * Optional. Prefix (path) of backup files in the swift container.
   *
   * @schema RedisEnterpriseDatabaseSpecBackupSwift#prefix
   */
  readonly prefix?: string;

  /**
   * The name of the K8s secret that holds Swift credentials. The secret must contain the keys "Key" and "User", and these must hold the corresponding credentials: service access key and service user name (pattern for the latter does not allow special characters &,<,>,")
   *
   * @schema RedisEnterpriseDatabaseSpecBackupSwift#swiftSecretName
   */
  readonly swiftSecretName: string;

}

/**
 * Converts an object of type 'RedisEnterpriseDatabaseSpecBackupSwift' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_RedisEnterpriseDatabaseSpecBackupSwift(obj: RedisEnterpriseDatabaseSpecBackupSwift | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'auth_url': obj.authUrl,
    'container': obj.container,
    'prefix': obj.prefix,
    'swiftSecretName': obj.swiftSecretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

