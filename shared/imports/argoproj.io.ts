// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Application is a definition of Application resource.
 *
 * @schema Application
 */
export class Application extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Application"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'argoproj.io/v1alpha1',
    kind: 'Application',
  }

  /**
   * Renders a Kubernetes manifest for "Application".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ApplicationProps): any {
    return {
      ...Application.GVK,
      ...toJson_ApplicationProps(props),
    };
  }

  /**
   * Defines a "Application" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ApplicationProps) {
    super(scope, id, {
      ...Application.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Application.GVK,
      ...toJson_ApplicationProps(resolved),
    };
  }
}

/**
 * Application is a definition of Application resource.
 *
 * @schema Application
 */
export interface ApplicationProps {
  /**
   * @schema Application#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * Operation contains information about a requested or running operation
   *
   * @schema Application#operation
   */
  readonly operation?: ApplicationOperation;

  /**
   * ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
   *
   * @schema Application#spec
   */
  readonly spec: ApplicationSpec;

}

/**
 * Converts an object of type 'ApplicationProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationProps(obj: ApplicationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'operation': toJson_ApplicationOperation(obj.operation),
    'spec': toJson_ApplicationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Operation contains information about a requested or running operation
 *
 * @schema ApplicationOperation
 */
export interface ApplicationOperation {
  /**
   * Info is a list of informational items for this operation
   *
   * @schema ApplicationOperation#info
   */
  readonly info?: ApplicationOperationInfo[];

  /**
   * InitiatedBy contains information about who initiated the operations
   *
   * @schema ApplicationOperation#initiatedBy
   */
  readonly initiatedBy?: ApplicationOperationInitiatedBy;

  /**
   * Retry controls the strategy to apply if a sync fails
   *
   * @schema ApplicationOperation#retry
   */
  readonly retry?: ApplicationOperationRetry;

  /**
   * Sync contains parameters for the operation
   *
   * @schema ApplicationOperation#sync
   */
  readonly sync?: ApplicationOperationSync;

}

/**
 * Converts an object of type 'ApplicationOperation' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperation(obj: ApplicationOperation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'info': obj.info?.map(y => toJson_ApplicationOperationInfo(y)),
    'initiatedBy': toJson_ApplicationOperationInitiatedBy(obj.initiatedBy),
    'retry': toJson_ApplicationOperationRetry(obj.retry),
    'sync': toJson_ApplicationOperationSync(obj.sync),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
 *
 * @schema ApplicationSpec
 */
export interface ApplicationSpec {
  /**
   * Destination is a reference to the target Kubernetes server and namespace
   *
   * @schema ApplicationSpec#destination
   */
  readonly destination: ApplicationSpecDestination;

  /**
   * IgnoreDifferences is a list of resources and their fields which should be ignored during comparison
   *
   * @schema ApplicationSpec#ignoreDifferences
   */
  readonly ignoreDifferences?: ApplicationSpecIgnoreDifferences[];

  /**
   * Info contains a list of information (URLs, email addresses, and plain text) that relates to the application
   *
   * @schema ApplicationSpec#info
   */
  readonly info?: ApplicationSpecInfo[];

  /**
   * Project is a reference to the project this application belongs to.
   * The empty string means that application belongs to the 'default' project.
   *
   * @schema ApplicationSpec#project
   */
  readonly project: string;

  /**
   * RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions.
   * This should only be changed in exceptional circumstances.
   * Setting to zero will store no history. This will reduce storage used.
   * Increasing will increase the space used to store the history, so we do not recommend increasing it.
   * Default is 10.
   *
   * @default 10.
   * @schema ApplicationSpec#revisionHistoryLimit
   */
  readonly revisionHistoryLimit?: number;

  /**
   * Source is a reference to the location of the application's manifests or chart
   *
   * @schema ApplicationSpec#source
   */
  readonly source?: ApplicationSpecSource;

  /**
   * SourceHydrator provides a way to push hydrated manifests back to git before syncing them to the cluster.
   *
   * @schema ApplicationSpec#sourceHydrator
   */
  readonly sourceHydrator?: ApplicationSpecSourceHydrator;

  /**
   * Sources is a reference to the location of the application's manifests or chart
   *
   * @schema ApplicationSpec#sources
   */
  readonly sources?: ApplicationSpecSources[];

  /**
   * SyncPolicy controls when and how a sync will be performed
   *
   * @schema ApplicationSpec#syncPolicy
   */
  readonly syncPolicy?: ApplicationSpecSyncPolicy;

}

/**
 * Converts an object of type 'ApplicationSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpec(obj: ApplicationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destination': toJson_ApplicationSpecDestination(obj.destination),
    'ignoreDifferences': obj.ignoreDifferences?.map(y => toJson_ApplicationSpecIgnoreDifferences(y)),
    'info': obj.info?.map(y => toJson_ApplicationSpecInfo(y)),
    'project': obj.project,
    'revisionHistoryLimit': obj.revisionHistoryLimit,
    'source': toJson_ApplicationSpecSource(obj.source),
    'sourceHydrator': toJson_ApplicationSpecSourceHydrator(obj.sourceHydrator),
    'sources': obj.sources?.map(y => toJson_ApplicationSpecSources(y)),
    'syncPolicy': toJson_ApplicationSpecSyncPolicy(obj.syncPolicy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationOperationInfo
 */
export interface ApplicationOperationInfo {
  /**
   * @schema ApplicationOperationInfo#name
   */
  readonly name: string;

  /**
   * @schema ApplicationOperationInfo#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationOperationInfo' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationInfo(obj: ApplicationOperationInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * InitiatedBy contains information about who initiated the operations
 *
 * @schema ApplicationOperationInitiatedBy
 */
export interface ApplicationOperationInitiatedBy {
  /**
   * Automated is set to true if operation was initiated automatically by the application controller.
   *
   * @schema ApplicationOperationInitiatedBy#automated
   */
  readonly automated?: boolean;

  /**
   * Username contains the name of a user who started operation
   *
   * @schema ApplicationOperationInitiatedBy#username
   */
  readonly username?: string;

}

/**
 * Converts an object of type 'ApplicationOperationInitiatedBy' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationInitiatedBy(obj: ApplicationOperationInitiatedBy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'automated': obj.automated,
    'username': obj.username,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Retry controls the strategy to apply if a sync fails
 *
 * @schema ApplicationOperationRetry
 */
export interface ApplicationOperationRetry {
  /**
   * Backoff controls how to backoff on subsequent retries of failed syncs
   *
   * @schema ApplicationOperationRetry#backoff
   */
  readonly backoff?: ApplicationOperationRetryBackoff;

  /**
   * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
   *
   * @schema ApplicationOperationRetry#limit
   */
  readonly limit?: number;

}

/**
 * Converts an object of type 'ApplicationOperationRetry' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationRetry(obj: ApplicationOperationRetry | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backoff': toJson_ApplicationOperationRetryBackoff(obj.backoff),
    'limit': obj.limit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Sync contains parameters for the operation
 *
 * @schema ApplicationOperationSync
 */
export interface ApplicationOperationSync {
  /**
   * SelfHealAttemptsCount contains the number of auto-heal attempts
   *
   * @schema ApplicationOperationSync#autoHealAttemptsCount
   */
  readonly autoHealAttemptsCount?: number;

  /**
   * DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
   *
   * @schema ApplicationOperationSync#dryRun
   */
  readonly dryRun?: boolean;

  /**
   * Manifests is an optional field that overrides sync source with a local directory for development
   *
   * @schema ApplicationOperationSync#manifests
   */
  readonly manifests?: string[];

  /**
   * Prune specifies to delete resources from the cluster that are no longer tracked in git
   *
   * @schema ApplicationOperationSync#prune
   */
  readonly prune?: boolean;

  /**
   * Resources describes which resources shall be part of the sync
   *
   * @schema ApplicationOperationSync#resources
   */
  readonly resources?: ApplicationOperationSyncResources[];

  /**
   * Revision is the revision (Git) or chart version (Helm) which to sync the application to
   * If omitted, will use the revision specified in app spec.
   *
   * @schema ApplicationOperationSync#revision
   */
  readonly revision?: string;

  /**
   * Revisions is the list of revision (Git) or chart version (Helm) which to sync each source in sources field for the application to
   * If omitted, will use the revision specified in app spec.
   *
   * @schema ApplicationOperationSync#revisions
   */
  readonly revisions?: string[];

  /**
   * Source overrides the source definition set in the application.
   * This is typically set in a Rollback operation and is nil during a Sync operation
   *
   * @schema ApplicationOperationSync#source
   */
  readonly source?: ApplicationOperationSyncSource;

  /**
   * Sources overrides the source definition set in the application.
   * This is typically set in a Rollback operation and is nil during a Sync operation
   *
   * @schema ApplicationOperationSync#sources
   */
  readonly sources?: ApplicationOperationSyncSources[];

  /**
   * SyncOptions provide per-sync sync-options, e.g. Validate=false
   *
   * @schema ApplicationOperationSync#syncOptions
   */
  readonly syncOptions?: string[];

  /**
   * SyncStrategy describes how to perform the sync
   *
   * @schema ApplicationOperationSync#syncStrategy
   */
  readonly syncStrategy?: ApplicationOperationSyncSyncStrategy;

}

/**
 * Converts an object of type 'ApplicationOperationSync' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSync(obj: ApplicationOperationSync | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'autoHealAttemptsCount': obj.autoHealAttemptsCount,
    'dryRun': obj.dryRun,
    'manifests': obj.manifests?.map(y => y),
    'prune': obj.prune,
    'resources': obj.resources?.map(y => toJson_ApplicationOperationSyncResources(y)),
    'revision': obj.revision,
    'revisions': obj.revisions?.map(y => y),
    'source': toJson_ApplicationOperationSyncSource(obj.source),
    'sources': obj.sources?.map(y => toJson_ApplicationOperationSyncSources(y)),
    'syncOptions': obj.syncOptions?.map(y => y),
    'syncStrategy': toJson_ApplicationOperationSyncSyncStrategy(obj.syncStrategy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Destination is a reference to the target Kubernetes server and namespace
 *
 * @schema ApplicationSpecDestination
 */
export interface ApplicationSpecDestination {
  /**
   * Name is an alternate way of specifying the target cluster by its symbolic name. This must be set if Server is not set.
   *
   * @schema ApplicationSpecDestination#name
   */
  readonly name?: string;

  /**
   * Namespace specifies the target namespace for the application's resources.
   * The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
   *
   * @schema ApplicationSpecDestination#namespace
   */
  readonly namespace?: string;

  /**
   * Server specifies the URL of the target cluster's Kubernetes control plane API. This must be set if Name is not set.
   *
   * @schema ApplicationSpecDestination#server
   */
  readonly server?: string;

}

/**
 * Converts an object of type 'ApplicationSpecDestination' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecDestination(obj: ApplicationSpecDestination | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
    'server': obj.server,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
 *
 * @schema ApplicationSpecIgnoreDifferences
 */
export interface ApplicationSpecIgnoreDifferences {
  /**
   * @schema ApplicationSpecIgnoreDifferences#group
   */
  readonly group?: string;

  /**
   * @schema ApplicationSpecIgnoreDifferences#jqPathExpressions
   */
  readonly jqPathExpressions?: string[];

  /**
   * @schema ApplicationSpecIgnoreDifferences#jsonPointers
   */
  readonly jsonPointers?: string[];

  /**
   * @schema ApplicationSpecIgnoreDifferences#kind
   */
  readonly kind: string;

  /**
   * ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the
   * desired state defined in the SCM and won't be displayed in diffs
   *
   * @schema ApplicationSpecIgnoreDifferences#managedFieldsManagers
   */
  readonly managedFieldsManagers?: string[];

  /**
   * @schema ApplicationSpecIgnoreDifferences#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationSpecIgnoreDifferences#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationSpecIgnoreDifferences' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecIgnoreDifferences(obj: ApplicationSpecIgnoreDifferences | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'jqPathExpressions': obj.jqPathExpressions?.map(y => y),
    'jsonPointers': obj.jsonPointers?.map(y => y),
    'kind': obj.kind,
    'managedFieldsManagers': obj.managedFieldsManagers?.map(y => y),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationSpecInfo
 */
export interface ApplicationSpecInfo {
  /**
   * @schema ApplicationSpecInfo#name
   */
  readonly name: string;

  /**
   * @schema ApplicationSpecInfo#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationSpecInfo' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecInfo(obj: ApplicationSpecInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Source is a reference to the location of the application's manifests or chart
 *
 * @schema ApplicationSpecSource
 */
export interface ApplicationSpecSource {
  /**
   * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
   *
   * @schema ApplicationSpecSource#chart
   */
  readonly chart?: string;

  /**
   * Directory holds path/directory specific options
   *
   * @schema ApplicationSpecSource#directory
   */
  readonly directory?: ApplicationSpecSourceDirectory;

  /**
   * Helm holds helm specific options
   *
   * @schema ApplicationSpecSource#helm
   */
  readonly helm?: ApplicationSpecSourceHelm;

  /**
   * Kustomize holds kustomize specific options
   *
   * @schema ApplicationSpecSource#kustomize
   */
  readonly kustomize?: ApplicationSpecSourceKustomize;

  /**
   * Name is used to refer to a source and is displayed in the UI. It is used in multi-source Applications.
   *
   * @schema ApplicationSpecSource#name
   */
  readonly name?: string;

  /**
   * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
   *
   * @schema ApplicationSpecSource#path
   */
  readonly path?: string;

  /**
   * Plugin holds config management plugin specific options
   *
   * @schema ApplicationSpecSource#plugin
   */
  readonly plugin?: ApplicationSpecSourcePlugin;

  /**
   * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
   *
   * @schema ApplicationSpecSource#ref
   */
  readonly ref?: string;

  /**
   * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
   *
   * @schema ApplicationSpecSource#repoURL
   */
  readonly repoUrl: string;

  /**
   * TargetRevision defines the revision of the source to sync the application to.
   * In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD.
   * In case of Helm, this is a semver tag for the Chart's version.
   *
   * @schema ApplicationSpecSource#targetRevision
   */
  readonly targetRevision?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSource(obj: ApplicationSpecSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'chart': obj.chart,
    'directory': toJson_ApplicationSpecSourceDirectory(obj.directory),
    'helm': toJson_ApplicationSpecSourceHelm(obj.helm),
    'kustomize': toJson_ApplicationSpecSourceKustomize(obj.kustomize),
    'name': obj.name,
    'path': obj.path,
    'plugin': toJson_ApplicationSpecSourcePlugin(obj.plugin),
    'ref': obj.ref,
    'repoURL': obj.repoUrl,
    'targetRevision': obj.targetRevision,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * SourceHydrator provides a way to push hydrated manifests back to git before syncing them to the cluster.
 *
 * @schema ApplicationSpecSourceHydrator
 */
export interface ApplicationSpecSourceHydrator {
  /**
   * DrySource specifies where the dry "don't repeat yourself" manifest source lives.
   *
   * @schema ApplicationSpecSourceHydrator#drySource
   */
  readonly drySource: ApplicationSpecSourceHydratorDrySource;

  /**
   * HydrateTo specifies an optional "staging" location to push hydrated manifests to. An external system would then
   * have to move manifests to the SyncSource, e.g. by pull request.
   *
   * @schema ApplicationSpecSourceHydrator#hydrateTo
   */
  readonly hydrateTo?: ApplicationSpecSourceHydratorHydrateTo;

  /**
   * SyncSource specifies where to sync hydrated manifests from.
   *
   * @schema ApplicationSpecSourceHydrator#syncSource
   */
  readonly syncSource: ApplicationSpecSourceHydratorSyncSource;

}

/**
 * Converts an object of type 'ApplicationSpecSourceHydrator' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceHydrator(obj: ApplicationSpecSourceHydrator | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'drySource': toJson_ApplicationSpecSourceHydratorDrySource(obj.drySource),
    'hydrateTo': toJson_ApplicationSpecSourceHydratorHydrateTo(obj.hydrateTo),
    'syncSource': toJson_ApplicationSpecSourceHydratorSyncSource(obj.syncSource),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * ApplicationSource contains all required information about the source of an application
 *
 * @schema ApplicationSpecSources
 */
export interface ApplicationSpecSources {
  /**
   * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
   *
   * @schema ApplicationSpecSources#chart
   */
  readonly chart?: string;

  /**
   * Directory holds path/directory specific options
   *
   * @schema ApplicationSpecSources#directory
   */
  readonly directory?: ApplicationSpecSourcesDirectory;

  /**
   * Helm holds helm specific options
   *
   * @schema ApplicationSpecSources#helm
   */
  readonly helm?: ApplicationSpecSourcesHelm;

  /**
   * Kustomize holds kustomize specific options
   *
   * @schema ApplicationSpecSources#kustomize
   */
  readonly kustomize?: ApplicationSpecSourcesKustomize;

  /**
   * Name is used to refer to a source and is displayed in the UI. It is used in multi-source Applications.
   *
   * @schema ApplicationSpecSources#name
   */
  readonly name?: string;

  /**
   * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
   *
   * @schema ApplicationSpecSources#path
   */
  readonly path?: string;

  /**
   * Plugin holds config management plugin specific options
   *
   * @schema ApplicationSpecSources#plugin
   */
  readonly plugin?: ApplicationSpecSourcesPlugin;

  /**
   * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
   *
   * @schema ApplicationSpecSources#ref
   */
  readonly ref?: string;

  /**
   * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
   *
   * @schema ApplicationSpecSources#repoURL
   */
  readonly repoUrl: string;

  /**
   * TargetRevision defines the revision of the source to sync the application to.
   * In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD.
   * In case of Helm, this is a semver tag for the Chart's version.
   *
   * @schema ApplicationSpecSources#targetRevision
   */
  readonly targetRevision?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSources' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSources(obj: ApplicationSpecSources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'chart': obj.chart,
    'directory': toJson_ApplicationSpecSourcesDirectory(obj.directory),
    'helm': toJson_ApplicationSpecSourcesHelm(obj.helm),
    'kustomize': toJson_ApplicationSpecSourcesKustomize(obj.kustomize),
    'name': obj.name,
    'path': obj.path,
    'plugin': toJson_ApplicationSpecSourcesPlugin(obj.plugin),
    'ref': obj.ref,
    'repoURL': obj.repoUrl,
    'targetRevision': obj.targetRevision,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * SyncPolicy controls when and how a sync will be performed
 *
 * @schema ApplicationSpecSyncPolicy
 */
export interface ApplicationSpecSyncPolicy {
  /**
   * Automated will keep an application synced to the target revision
   *
   * @schema ApplicationSpecSyncPolicy#automated
   */
  readonly automated?: ApplicationSpecSyncPolicyAutomated;

  /**
   * ManagedNamespaceMetadata controls metadata in the given namespace (if CreateNamespace=true)
   *
   * @schema ApplicationSpecSyncPolicy#managedNamespaceMetadata
   */
  readonly managedNamespaceMetadata?: ApplicationSpecSyncPolicyManagedNamespaceMetadata;

  /**
   * Retry controls failed sync retry behavior
   *
   * @schema ApplicationSpecSyncPolicy#retry
   */
  readonly retry?: ApplicationSpecSyncPolicyRetry;

  /**
   * Options allow you to specify whole app sync-options
   *
   * @schema ApplicationSpecSyncPolicy#syncOptions
   */
  readonly syncOptions?: string[];

}

/**
 * Converts an object of type 'ApplicationSpecSyncPolicy' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSyncPolicy(obj: ApplicationSpecSyncPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'automated': toJson_ApplicationSpecSyncPolicyAutomated(obj.automated),
    'managedNamespaceMetadata': toJson_ApplicationSpecSyncPolicyManagedNamespaceMetadata(obj.managedNamespaceMetadata),
    'retry': toJson_ApplicationSpecSyncPolicyRetry(obj.retry),
    'syncOptions': obj.syncOptions?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Backoff controls how to backoff on subsequent retries of failed syncs
 *
 * @schema ApplicationOperationRetryBackoff
 */
export interface ApplicationOperationRetryBackoff {
  /**
   * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
   *
   * @schema ApplicationOperationRetryBackoff#duration
   */
  readonly duration?: string;

  /**
   * Factor is a factor to multiply the base duration after each failed retry
   *
   * @schema ApplicationOperationRetryBackoff#factor
   */
  readonly factor?: number;

  /**
   * MaxDuration is the maximum amount of time allowed for the backoff strategy
   *
   * @schema ApplicationOperationRetryBackoff#maxDuration
   */
  readonly maxDuration?: string;

}

/**
 * Converts an object of type 'ApplicationOperationRetryBackoff' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationRetryBackoff(obj: ApplicationOperationRetryBackoff | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'duration': obj.duration,
    'factor': obj.factor,
    'maxDuration': obj.maxDuration,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * SyncOperationResource contains resources to sync.
 *
 * @schema ApplicationOperationSyncResources
 */
export interface ApplicationOperationSyncResources {
  /**
   * @schema ApplicationOperationSyncResources#group
   */
  readonly group?: string;

  /**
   * @schema ApplicationOperationSyncResources#kind
   */
  readonly kind: string;

  /**
   * @schema ApplicationOperationSyncResources#name
   */
  readonly name: string;

  /**
   * @schema ApplicationOperationSyncResources#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncResources' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncResources(obj: ApplicationOperationSyncResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Source overrides the source definition set in the application.
 * This is typically set in a Rollback operation and is nil during a Sync operation
 *
 * @schema ApplicationOperationSyncSource
 */
export interface ApplicationOperationSyncSource {
  /**
   * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
   *
   * @schema ApplicationOperationSyncSource#chart
   */
  readonly chart?: string;

  /**
   * Directory holds path/directory specific options
   *
   * @schema ApplicationOperationSyncSource#directory
   */
  readonly directory?: ApplicationOperationSyncSourceDirectory;

  /**
   * Helm holds helm specific options
   *
   * @schema ApplicationOperationSyncSource#helm
   */
  readonly helm?: ApplicationOperationSyncSourceHelm;

  /**
   * Kustomize holds kustomize specific options
   *
   * @schema ApplicationOperationSyncSource#kustomize
   */
  readonly kustomize?: ApplicationOperationSyncSourceKustomize;

  /**
   * Name is used to refer to a source and is displayed in the UI. It is used in multi-source Applications.
   *
   * @schema ApplicationOperationSyncSource#name
   */
  readonly name?: string;

  /**
   * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
   *
   * @schema ApplicationOperationSyncSource#path
   */
  readonly path?: string;

  /**
   * Plugin holds config management plugin specific options
   *
   * @schema ApplicationOperationSyncSource#plugin
   */
  readonly plugin?: ApplicationOperationSyncSourcePlugin;

  /**
   * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
   *
   * @schema ApplicationOperationSyncSource#ref
   */
  readonly ref?: string;

  /**
   * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
   *
   * @schema ApplicationOperationSyncSource#repoURL
   */
  readonly repoUrl: string;

  /**
   * TargetRevision defines the revision of the source to sync the application to.
   * In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD.
   * In case of Helm, this is a semver tag for the Chart's version.
   *
   * @schema ApplicationOperationSyncSource#targetRevision
   */
  readonly targetRevision?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSource(obj: ApplicationOperationSyncSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'chart': obj.chart,
    'directory': toJson_ApplicationOperationSyncSourceDirectory(obj.directory),
    'helm': toJson_ApplicationOperationSyncSourceHelm(obj.helm),
    'kustomize': toJson_ApplicationOperationSyncSourceKustomize(obj.kustomize),
    'name': obj.name,
    'path': obj.path,
    'plugin': toJson_ApplicationOperationSyncSourcePlugin(obj.plugin),
    'ref': obj.ref,
    'repoURL': obj.repoUrl,
    'targetRevision': obj.targetRevision,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * ApplicationSource contains all required information about the source of an application
 *
 * @schema ApplicationOperationSyncSources
 */
export interface ApplicationOperationSyncSources {
  /**
   * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
   *
   * @schema ApplicationOperationSyncSources#chart
   */
  readonly chart?: string;

  /**
   * Directory holds path/directory specific options
   *
   * @schema ApplicationOperationSyncSources#directory
   */
  readonly directory?: ApplicationOperationSyncSourcesDirectory;

  /**
   * Helm holds helm specific options
   *
   * @schema ApplicationOperationSyncSources#helm
   */
  readonly helm?: ApplicationOperationSyncSourcesHelm;

  /**
   * Kustomize holds kustomize specific options
   *
   * @schema ApplicationOperationSyncSources#kustomize
   */
  readonly kustomize?: ApplicationOperationSyncSourcesKustomize;

  /**
   * Name is used to refer to a source and is displayed in the UI. It is used in multi-source Applications.
   *
   * @schema ApplicationOperationSyncSources#name
   */
  readonly name?: string;

  /**
   * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
   *
   * @schema ApplicationOperationSyncSources#path
   */
  readonly path?: string;

  /**
   * Plugin holds config management plugin specific options
   *
   * @schema ApplicationOperationSyncSources#plugin
   */
  readonly plugin?: ApplicationOperationSyncSourcesPlugin;

  /**
   * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
   *
   * @schema ApplicationOperationSyncSources#ref
   */
  readonly ref?: string;

  /**
   * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
   *
   * @schema ApplicationOperationSyncSources#repoURL
   */
  readonly repoUrl: string;

  /**
   * TargetRevision defines the revision of the source to sync the application to.
   * In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD.
   * In case of Helm, this is a semver tag for the Chart's version.
   *
   * @schema ApplicationOperationSyncSources#targetRevision
   */
  readonly targetRevision?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSources' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSources(obj: ApplicationOperationSyncSources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'chart': obj.chart,
    'directory': toJson_ApplicationOperationSyncSourcesDirectory(obj.directory),
    'helm': toJson_ApplicationOperationSyncSourcesHelm(obj.helm),
    'kustomize': toJson_ApplicationOperationSyncSourcesKustomize(obj.kustomize),
    'name': obj.name,
    'path': obj.path,
    'plugin': toJson_ApplicationOperationSyncSourcesPlugin(obj.plugin),
    'ref': obj.ref,
    'repoURL': obj.repoUrl,
    'targetRevision': obj.targetRevision,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * SyncStrategy describes how to perform the sync
 *
 * @schema ApplicationOperationSyncSyncStrategy
 */
export interface ApplicationOperationSyncSyncStrategy {
  /**
   * Apply will perform a `kubectl apply` to perform the sync.
   *
   * @schema ApplicationOperationSyncSyncStrategy#apply
   */
  readonly apply?: ApplicationOperationSyncSyncStrategyApply;

  /**
   * Hook will submit any referenced resources to perform the sync. This is the default strategy
   *
   * @schema ApplicationOperationSyncSyncStrategy#hook
   */
  readonly hook?: ApplicationOperationSyncSyncStrategyHook;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSyncStrategy' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSyncStrategy(obj: ApplicationOperationSyncSyncStrategy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apply': toJson_ApplicationOperationSyncSyncStrategyApply(obj.apply),
    'hook': toJson_ApplicationOperationSyncSyncStrategyHook(obj.hook),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Directory holds path/directory specific options
 *
 * @schema ApplicationSpecSourceDirectory
 */
export interface ApplicationSpecSourceDirectory {
  /**
   * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
   *
   * @schema ApplicationSpecSourceDirectory#exclude
   */
  readonly exclude?: string;

  /**
   * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
   *
   * @schema ApplicationSpecSourceDirectory#include
   */
  readonly include?: string;

  /**
   * Jsonnet holds options specific to Jsonnet
   *
   * @schema ApplicationSpecSourceDirectory#jsonnet
   */
  readonly jsonnet?: ApplicationSpecSourceDirectoryJsonnet;

  /**
   * Recurse specifies whether to scan a directory recursively for manifests
   *
   * @schema ApplicationSpecSourceDirectory#recurse
   */
  readonly recurse?: boolean;

}

/**
 * Converts an object of type 'ApplicationSpecSourceDirectory' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceDirectory(obj: ApplicationSpecSourceDirectory | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exclude': obj.exclude,
    'include': obj.include,
    'jsonnet': toJson_ApplicationSpecSourceDirectoryJsonnet(obj.jsonnet),
    'recurse': obj.recurse,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Helm holds helm specific options
 *
 * @schema ApplicationSpecSourceHelm
 */
export interface ApplicationSpecSourceHelm {
  /**
   * APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default,
   * Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.
   *
   * @schema ApplicationSpecSourceHelm#apiVersions
   */
  readonly apiVersions?: string[];

  /**
   * FileParameters are file parameters to the helm template
   *
   * @schema ApplicationSpecSourceHelm#fileParameters
   */
  readonly fileParameters?: ApplicationSpecSourceHelmFileParameters[];

  /**
   * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
   *
   * @schema ApplicationSpecSourceHelm#ignoreMissingValueFiles
   */
  readonly ignoreMissingValueFiles?: boolean;

  /**
   * KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD
   * uses the Kubernetes version of the target cluster.
   *
   * @schema ApplicationSpecSourceHelm#kubeVersion
   */
  readonly kubeVersion?: string;

  /**
   * Namespace is an optional namespace to template with. If left empty, defaults to the app's destination namespace.
   *
   * @schema ApplicationSpecSourceHelm#namespace
   */
  readonly namespace?: string;

  /**
   * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
   *
   * @schema ApplicationSpecSourceHelm#parameters
   */
  readonly parameters?: ApplicationSpecSourceHelmParameters[];

  /**
   * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
   *
   * @schema ApplicationSpecSourceHelm#passCredentials
   */
  readonly passCredentials?: boolean;

  /**
   * ReleaseName is the Helm release name to use. If omitted it will use the application name
   *
   * @schema ApplicationSpecSourceHelm#releaseName
   */
  readonly releaseName?: string;

  /**
   * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
   *
   * @schema ApplicationSpecSourceHelm#skipCrds
   */
  readonly skipCrds?: boolean;

  /**
   * SkipSchemaValidation skips JSON schema validation (Helm's --skip-schema-validation)
   *
   * @schema ApplicationSpecSourceHelm#skipSchemaValidation
   */
  readonly skipSchemaValidation?: boolean;

  /**
   * SkipTests skips test manifest installation step (Helm's --skip-tests).
   *
   * @schema ApplicationSpecSourceHelm#skipTests
   */
  readonly skipTests?: boolean;

  /**
   * ValuesFiles is a list of Helm value files to use when generating a template
   *
   * @schema ApplicationSpecSourceHelm#valueFiles
   */
  readonly valueFiles?: string[];

  /**
   * Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
   *
   * @schema ApplicationSpecSourceHelm#values
   */
  readonly values?: string;

  /**
   * ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
   *
   * @schema ApplicationSpecSourceHelm#valuesObject
   */
  readonly valuesObject?: any;

  /**
   * Version is the Helm version to use for templating ("3")
   *
   * @schema ApplicationSpecSourceHelm#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceHelm' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceHelm(obj: ApplicationSpecSourceHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersions': obj.apiVersions?.map(y => y),
    'fileParameters': obj.fileParameters?.map(y => toJson_ApplicationSpecSourceHelmFileParameters(y)),
    'ignoreMissingValueFiles': obj.ignoreMissingValueFiles,
    'kubeVersion': obj.kubeVersion,
    'namespace': obj.namespace,
    'parameters': obj.parameters?.map(y => toJson_ApplicationSpecSourceHelmParameters(y)),
    'passCredentials': obj.passCredentials,
    'releaseName': obj.releaseName,
    'skipCrds': obj.skipCrds,
    'skipSchemaValidation': obj.skipSchemaValidation,
    'skipTests': obj.skipTests,
    'valueFiles': obj.valueFiles?.map(y => y),
    'values': obj.values,
    'valuesObject': obj.valuesObject,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Kustomize holds kustomize specific options
 *
 * @schema ApplicationSpecSourceKustomize
 */
export interface ApplicationSpecSourceKustomize {
  /**
   * APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default,
   * Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.
   *
   * @schema ApplicationSpecSourceKustomize#apiVersions
   */
  readonly apiVersions?: string[];

  /**
   * CommonAnnotations is a list of additional annotations to add to rendered manifests
   *
   * @schema ApplicationSpecSourceKustomize#commonAnnotations
   */
  readonly commonAnnotations?: { [key: string]: string };

  /**
   * CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
   *
   * @schema ApplicationSpecSourceKustomize#commonAnnotationsEnvsubst
   */
  readonly commonAnnotationsEnvsubst?: boolean;

  /**
   * CommonLabels is a list of additional labels to add to rendered manifests
   *
   * @schema ApplicationSpecSourceKustomize#commonLabels
   */
  readonly commonLabels?: { [key: string]: string };

  /**
   * Components specifies a list of kustomize components to add to the kustomization before building
   *
   * @schema ApplicationSpecSourceKustomize#components
   */
  readonly components?: string[];

  /**
   * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
   *
   * @schema ApplicationSpecSourceKustomize#forceCommonAnnotations
   */
  readonly forceCommonAnnotations?: boolean;

  /**
   * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
   *
   * @schema ApplicationSpecSourceKustomize#forceCommonLabels
   */
  readonly forceCommonLabels?: boolean;

  /**
   * IgnoreMissingComponents prevents kustomize from failing when components do not exist locally by not appending them to kustomization file
   *
   * @schema ApplicationSpecSourceKustomize#ignoreMissingComponents
   */
  readonly ignoreMissingComponents?: boolean;

  /**
   * Images is a list of Kustomize image override specifications
   *
   * @schema ApplicationSpecSourceKustomize#images
   */
  readonly images?: string[];

  /**
   * KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD
   * uses the Kubernetes version of the target cluster.
   *
   * @schema ApplicationSpecSourceKustomize#kubeVersion
   */
  readonly kubeVersion?: string;

  /**
   * LabelIncludeTemplates specifies whether to apply common labels to resource templates or not
   *
   * @schema ApplicationSpecSourceKustomize#labelIncludeTemplates
   */
  readonly labelIncludeTemplates?: boolean;

  /**
   * LabelWithoutSelector specifies whether to apply common labels to resource selectors or not
   *
   * @schema ApplicationSpecSourceKustomize#labelWithoutSelector
   */
  readonly labelWithoutSelector?: boolean;

  /**
   * NamePrefix is a prefix appended to resources for Kustomize apps
   *
   * @schema ApplicationSpecSourceKustomize#namePrefix
   */
  readonly namePrefix?: string;

  /**
   * NameSuffix is a suffix appended to resources for Kustomize apps
   *
   * @schema ApplicationSpecSourceKustomize#nameSuffix
   */
  readonly nameSuffix?: string;

  /**
   * Namespace sets the namespace that Kustomize adds to all resources
   *
   * @schema ApplicationSpecSourceKustomize#namespace
   */
  readonly namespace?: string;

  /**
   * Patches is a list of Kustomize patches
   *
   * @schema ApplicationSpecSourceKustomize#patches
   */
  readonly patches?: ApplicationSpecSourceKustomizePatches[];

  /**
   * Replicas is a list of Kustomize Replicas override specifications
   *
   * @schema ApplicationSpecSourceKustomize#replicas
   */
  readonly replicas?: ApplicationSpecSourceKustomizeReplicas[];

  /**
   * Version controls which version of Kustomize to use for rendering manifests
   *
   * @schema ApplicationSpecSourceKustomize#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceKustomize' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceKustomize(obj: ApplicationSpecSourceKustomize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersions': obj.apiVersions?.map(y => y),
    'commonAnnotations': ((obj.commonAnnotations) === undefined) ? undefined : (Object.entries(obj.commonAnnotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'commonAnnotationsEnvsubst': obj.commonAnnotationsEnvsubst,
    'commonLabels': ((obj.commonLabels) === undefined) ? undefined : (Object.entries(obj.commonLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'components': obj.components?.map(y => y),
    'forceCommonAnnotations': obj.forceCommonAnnotations,
    'forceCommonLabels': obj.forceCommonLabels,
    'ignoreMissingComponents': obj.ignoreMissingComponents,
    'images': obj.images?.map(y => y),
    'kubeVersion': obj.kubeVersion,
    'labelIncludeTemplates': obj.labelIncludeTemplates,
    'labelWithoutSelector': obj.labelWithoutSelector,
    'namePrefix': obj.namePrefix,
    'nameSuffix': obj.nameSuffix,
    'namespace': obj.namespace,
    'patches': obj.patches?.map(y => toJson_ApplicationSpecSourceKustomizePatches(y)),
    'replicas': obj.replicas?.map(y => toJson_ApplicationSpecSourceKustomizeReplicas(y)),
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Plugin holds config management plugin specific options
 *
 * @schema ApplicationSpecSourcePlugin
 */
export interface ApplicationSpecSourcePlugin {
  /**
   * Env is a list of environment variable entries
   *
   * @schema ApplicationSpecSourcePlugin#env
   */
  readonly env?: ApplicationSpecSourcePluginEnv[];

  /**
   * @schema ApplicationSpecSourcePlugin#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationSpecSourcePlugin#parameters
   */
  readonly parameters?: ApplicationSpecSourcePluginParameters[];

}

/**
 * Converts an object of type 'ApplicationSpecSourcePlugin' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcePlugin(obj: ApplicationSpecSourcePlugin | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'env': obj.env?.map(y => toJson_ApplicationSpecSourcePluginEnv(y)),
    'name': obj.name,
    'parameters': obj.parameters?.map(y => toJson_ApplicationSpecSourcePluginParameters(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * DrySource specifies where the dry "don't repeat yourself" manifest source lives.
 *
 * @schema ApplicationSpecSourceHydratorDrySource
 */
export interface ApplicationSpecSourceHydratorDrySource {
  /**
   * Path is a directory path within the Git repository where the manifests are located
   *
   * @schema ApplicationSpecSourceHydratorDrySource#path
   */
  readonly path: string;

  /**
   * RepoURL is the URL to the git repository that contains the application manifests
   *
   * @schema ApplicationSpecSourceHydratorDrySource#repoURL
   */
  readonly repoUrl: string;

  /**
   * TargetRevision defines the revision of the source to hydrate
   *
   * @schema ApplicationSpecSourceHydratorDrySource#targetRevision
   */
  readonly targetRevision: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceHydratorDrySource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceHydratorDrySource(obj: ApplicationSpecSourceHydratorDrySource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
    'repoURL': obj.repoUrl,
    'targetRevision': obj.targetRevision,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * HydrateTo specifies an optional "staging" location to push hydrated manifests to. An external system would then
 * have to move manifests to the SyncSource, e.g. by pull request.
 *
 * @schema ApplicationSpecSourceHydratorHydrateTo
 */
export interface ApplicationSpecSourceHydratorHydrateTo {
  /**
   * TargetBranch is the branch to which hydrated manifests should be committed
   *
   * @schema ApplicationSpecSourceHydratorHydrateTo#targetBranch
   */
  readonly targetBranch: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceHydratorHydrateTo' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceHydratorHydrateTo(obj: ApplicationSpecSourceHydratorHydrateTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'targetBranch': obj.targetBranch,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * SyncSource specifies where to sync hydrated manifests from.
 *
 * @schema ApplicationSpecSourceHydratorSyncSource
 */
export interface ApplicationSpecSourceHydratorSyncSource {
  /**
   * Path is a directory path within the git repository where hydrated manifests should be committed to and synced
   * from. If hydrateTo is set, this is just the path from which hydrated manifests will be synced.
   *
   * @schema ApplicationSpecSourceHydratorSyncSource#path
   */
  readonly path: string;

  /**
   * TargetBranch is the branch to which hydrated manifests should be committed
   *
   * @schema ApplicationSpecSourceHydratorSyncSource#targetBranch
   */
  readonly targetBranch: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceHydratorSyncSource' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceHydratorSyncSource(obj: ApplicationSpecSourceHydratorSyncSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
    'targetBranch': obj.targetBranch,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Directory holds path/directory specific options
 *
 * @schema ApplicationSpecSourcesDirectory
 */
export interface ApplicationSpecSourcesDirectory {
  /**
   * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
   *
   * @schema ApplicationSpecSourcesDirectory#exclude
   */
  readonly exclude?: string;

  /**
   * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
   *
   * @schema ApplicationSpecSourcesDirectory#include
   */
  readonly include?: string;

  /**
   * Jsonnet holds options specific to Jsonnet
   *
   * @schema ApplicationSpecSourcesDirectory#jsonnet
   */
  readonly jsonnet?: ApplicationSpecSourcesDirectoryJsonnet;

  /**
   * Recurse specifies whether to scan a directory recursively for manifests
   *
   * @schema ApplicationSpecSourcesDirectory#recurse
   */
  readonly recurse?: boolean;

}

/**
 * Converts an object of type 'ApplicationSpecSourcesDirectory' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcesDirectory(obj: ApplicationSpecSourcesDirectory | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exclude': obj.exclude,
    'include': obj.include,
    'jsonnet': toJson_ApplicationSpecSourcesDirectoryJsonnet(obj.jsonnet),
    'recurse': obj.recurse,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Helm holds helm specific options
 *
 * @schema ApplicationSpecSourcesHelm
 */
export interface ApplicationSpecSourcesHelm {
  /**
   * APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default,
   * Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.
   *
   * @schema ApplicationSpecSourcesHelm#apiVersions
   */
  readonly apiVersions?: string[];

  /**
   * FileParameters are file parameters to the helm template
   *
   * @schema ApplicationSpecSourcesHelm#fileParameters
   */
  readonly fileParameters?: ApplicationSpecSourcesHelmFileParameters[];

  /**
   * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
   *
   * @schema ApplicationSpecSourcesHelm#ignoreMissingValueFiles
   */
  readonly ignoreMissingValueFiles?: boolean;

  /**
   * KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD
   * uses the Kubernetes version of the target cluster.
   *
   * @schema ApplicationSpecSourcesHelm#kubeVersion
   */
  readonly kubeVersion?: string;

  /**
   * Namespace is an optional namespace to template with. If left empty, defaults to the app's destination namespace.
   *
   * @schema ApplicationSpecSourcesHelm#namespace
   */
  readonly namespace?: string;

  /**
   * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
   *
   * @schema ApplicationSpecSourcesHelm#parameters
   */
  readonly parameters?: ApplicationSpecSourcesHelmParameters[];

  /**
   * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
   *
   * @schema ApplicationSpecSourcesHelm#passCredentials
   */
  readonly passCredentials?: boolean;

  /**
   * ReleaseName is the Helm release name to use. If omitted it will use the application name
   *
   * @schema ApplicationSpecSourcesHelm#releaseName
   */
  readonly releaseName?: string;

  /**
   * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
   *
   * @schema ApplicationSpecSourcesHelm#skipCrds
   */
  readonly skipCrds?: boolean;

  /**
   * SkipSchemaValidation skips JSON schema validation (Helm's --skip-schema-validation)
   *
   * @schema ApplicationSpecSourcesHelm#skipSchemaValidation
   */
  readonly skipSchemaValidation?: boolean;

  /**
   * SkipTests skips test manifest installation step (Helm's --skip-tests).
   *
   * @schema ApplicationSpecSourcesHelm#skipTests
   */
  readonly skipTests?: boolean;

  /**
   * ValuesFiles is a list of Helm value files to use when generating a template
   *
   * @schema ApplicationSpecSourcesHelm#valueFiles
   */
  readonly valueFiles?: string[];

  /**
   * Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
   *
   * @schema ApplicationSpecSourcesHelm#values
   */
  readonly values?: string;

  /**
   * ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
   *
   * @schema ApplicationSpecSourcesHelm#valuesObject
   */
  readonly valuesObject?: any;

  /**
   * Version is the Helm version to use for templating ("3")
   *
   * @schema ApplicationSpecSourcesHelm#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourcesHelm' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcesHelm(obj: ApplicationSpecSourcesHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersions': obj.apiVersions?.map(y => y),
    'fileParameters': obj.fileParameters?.map(y => toJson_ApplicationSpecSourcesHelmFileParameters(y)),
    'ignoreMissingValueFiles': obj.ignoreMissingValueFiles,
    'kubeVersion': obj.kubeVersion,
    'namespace': obj.namespace,
    'parameters': obj.parameters?.map(y => toJson_ApplicationSpecSourcesHelmParameters(y)),
    'passCredentials': obj.passCredentials,
    'releaseName': obj.releaseName,
    'skipCrds': obj.skipCrds,
    'skipSchemaValidation': obj.skipSchemaValidation,
    'skipTests': obj.skipTests,
    'valueFiles': obj.valueFiles?.map(y => y),
    'values': obj.values,
    'valuesObject': obj.valuesObject,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Kustomize holds kustomize specific options
 *
 * @schema ApplicationSpecSourcesKustomize
 */
export interface ApplicationSpecSourcesKustomize {
  /**
   * APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default,
   * Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.
   *
   * @schema ApplicationSpecSourcesKustomize#apiVersions
   */
  readonly apiVersions?: string[];

  /**
   * CommonAnnotations is a list of additional annotations to add to rendered manifests
   *
   * @schema ApplicationSpecSourcesKustomize#commonAnnotations
   */
  readonly commonAnnotations?: { [key: string]: string };

  /**
   * CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
   *
   * @schema ApplicationSpecSourcesKustomize#commonAnnotationsEnvsubst
   */
  readonly commonAnnotationsEnvsubst?: boolean;

  /**
   * CommonLabels is a list of additional labels to add to rendered manifests
   *
   * @schema ApplicationSpecSourcesKustomize#commonLabels
   */
  readonly commonLabels?: { [key: string]: string };

  /**
   * Components specifies a list of kustomize components to add to the kustomization before building
   *
   * @schema ApplicationSpecSourcesKustomize#components
   */
  readonly components?: string[];

  /**
   * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
   *
   * @schema ApplicationSpecSourcesKustomize#forceCommonAnnotations
   */
  readonly forceCommonAnnotations?: boolean;

  /**
   * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
   *
   * @schema ApplicationSpecSourcesKustomize#forceCommonLabels
   */
  readonly forceCommonLabels?: boolean;

  /**
   * IgnoreMissingComponents prevents kustomize from failing when components do not exist locally by not appending them to kustomization file
   *
   * @schema ApplicationSpecSourcesKustomize#ignoreMissingComponents
   */
  readonly ignoreMissingComponents?: boolean;

  /**
   * Images is a list of Kustomize image override specifications
   *
   * @schema ApplicationSpecSourcesKustomize#images
   */
  readonly images?: string[];

  /**
   * KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD
   * uses the Kubernetes version of the target cluster.
   *
   * @schema ApplicationSpecSourcesKustomize#kubeVersion
   */
  readonly kubeVersion?: string;

  /**
   * LabelIncludeTemplates specifies whether to apply common labels to resource templates or not
   *
   * @schema ApplicationSpecSourcesKustomize#labelIncludeTemplates
   */
  readonly labelIncludeTemplates?: boolean;

  /**
   * LabelWithoutSelector specifies whether to apply common labels to resource selectors or not
   *
   * @schema ApplicationSpecSourcesKustomize#labelWithoutSelector
   */
  readonly labelWithoutSelector?: boolean;

  /**
   * NamePrefix is a prefix appended to resources for Kustomize apps
   *
   * @schema ApplicationSpecSourcesKustomize#namePrefix
   */
  readonly namePrefix?: string;

  /**
   * NameSuffix is a suffix appended to resources for Kustomize apps
   *
   * @schema ApplicationSpecSourcesKustomize#nameSuffix
   */
  readonly nameSuffix?: string;

  /**
   * Namespace sets the namespace that Kustomize adds to all resources
   *
   * @schema ApplicationSpecSourcesKustomize#namespace
   */
  readonly namespace?: string;

  /**
   * Patches is a list of Kustomize patches
   *
   * @schema ApplicationSpecSourcesKustomize#patches
   */
  readonly patches?: ApplicationSpecSourcesKustomizePatches[];

  /**
   * Replicas is a list of Kustomize Replicas override specifications
   *
   * @schema ApplicationSpecSourcesKustomize#replicas
   */
  readonly replicas?: ApplicationSpecSourcesKustomizeReplicas[];

  /**
   * Version controls which version of Kustomize to use for rendering manifests
   *
   * @schema ApplicationSpecSourcesKustomize#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourcesKustomize' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcesKustomize(obj: ApplicationSpecSourcesKustomize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersions': obj.apiVersions?.map(y => y),
    'commonAnnotations': ((obj.commonAnnotations) === undefined) ? undefined : (Object.entries(obj.commonAnnotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'commonAnnotationsEnvsubst': obj.commonAnnotationsEnvsubst,
    'commonLabels': ((obj.commonLabels) === undefined) ? undefined : (Object.entries(obj.commonLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'components': obj.components?.map(y => y),
    'forceCommonAnnotations': obj.forceCommonAnnotations,
    'forceCommonLabels': obj.forceCommonLabels,
    'ignoreMissingComponents': obj.ignoreMissingComponents,
    'images': obj.images?.map(y => y),
    'kubeVersion': obj.kubeVersion,
    'labelIncludeTemplates': obj.labelIncludeTemplates,
    'labelWithoutSelector': obj.labelWithoutSelector,
    'namePrefix': obj.namePrefix,
    'nameSuffix': obj.nameSuffix,
    'namespace': obj.namespace,
    'patches': obj.patches?.map(y => toJson_ApplicationSpecSourcesKustomizePatches(y)),
    'replicas': obj.replicas?.map(y => toJson_ApplicationSpecSourcesKustomizeReplicas(y)),
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Plugin holds config management plugin specific options
 *
 * @schema ApplicationSpecSourcesPlugin
 */
export interface ApplicationSpecSourcesPlugin {
  /**
   * Env is a list of environment variable entries
   *
   * @schema ApplicationSpecSourcesPlugin#env
   */
  readonly env?: ApplicationSpecSourcesPluginEnv[];

  /**
   * @schema ApplicationSpecSourcesPlugin#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationSpecSourcesPlugin#parameters
   */
  readonly parameters?: ApplicationSpecSourcesPluginParameters[];

}

/**
 * Converts an object of type 'ApplicationSpecSourcesPlugin' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcesPlugin(obj: ApplicationSpecSourcesPlugin | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'env': obj.env?.map(y => toJson_ApplicationSpecSourcesPluginEnv(y)),
    'name': obj.name,
    'parameters': obj.parameters?.map(y => toJson_ApplicationSpecSourcesPluginParameters(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Automated will keep an application synced to the target revision
 *
 * @schema ApplicationSpecSyncPolicyAutomated
 */
export interface ApplicationSpecSyncPolicyAutomated {
  /**
   * AllowEmpty allows apps have zero live resources (default: false)
   *
   * @schema ApplicationSpecSyncPolicyAutomated#allowEmpty
   */
  readonly allowEmpty?: boolean;

  /**
   * Enable allows apps to explicitly control automated sync
   *
   * @schema ApplicationSpecSyncPolicyAutomated#enabled
   */
  readonly enabled?: boolean;

  /**
   * Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)
   *
   * @schema ApplicationSpecSyncPolicyAutomated#prune
   */
  readonly prune?: boolean;

  /**
   * SelfHeal specifies whether to revert resources back to their desired state upon modification in the cluster (default: false)
   *
   * @schema ApplicationSpecSyncPolicyAutomated#selfHeal
   */
  readonly selfHeal?: boolean;

}

/**
 * Converts an object of type 'ApplicationSpecSyncPolicyAutomated' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSyncPolicyAutomated(obj: ApplicationSpecSyncPolicyAutomated | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowEmpty': obj.allowEmpty,
    'enabled': obj.enabled,
    'prune': obj.prune,
    'selfHeal': obj.selfHeal,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * ManagedNamespaceMetadata controls metadata in the given namespace (if CreateNamespace=true)
 *
 * @schema ApplicationSpecSyncPolicyManagedNamespaceMetadata
 */
export interface ApplicationSpecSyncPolicyManagedNamespaceMetadata {
  /**
   * @schema ApplicationSpecSyncPolicyManagedNamespaceMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationSpecSyncPolicyManagedNamespaceMetadata#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * Converts an object of type 'ApplicationSpecSyncPolicyManagedNamespaceMetadata' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSyncPolicyManagedNamespaceMetadata(obj: ApplicationSpecSyncPolicyManagedNamespaceMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Retry controls failed sync retry behavior
 *
 * @schema ApplicationSpecSyncPolicyRetry
 */
export interface ApplicationSpecSyncPolicyRetry {
  /**
   * Backoff controls how to backoff on subsequent retries of failed syncs
   *
   * @schema ApplicationSpecSyncPolicyRetry#backoff
   */
  readonly backoff?: ApplicationSpecSyncPolicyRetryBackoff;

  /**
   * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
   *
   * @schema ApplicationSpecSyncPolicyRetry#limit
   */
  readonly limit?: number;

}

/**
 * Converts an object of type 'ApplicationSpecSyncPolicyRetry' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSyncPolicyRetry(obj: ApplicationSpecSyncPolicyRetry | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backoff': toJson_ApplicationSpecSyncPolicyRetryBackoff(obj.backoff),
    'limit': obj.limit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Directory holds path/directory specific options
 *
 * @schema ApplicationOperationSyncSourceDirectory
 */
export interface ApplicationOperationSyncSourceDirectory {
  /**
   * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
   *
   * @schema ApplicationOperationSyncSourceDirectory#exclude
   */
  readonly exclude?: string;

  /**
   * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
   *
   * @schema ApplicationOperationSyncSourceDirectory#include
   */
  readonly include?: string;

  /**
   * Jsonnet holds options specific to Jsonnet
   *
   * @schema ApplicationOperationSyncSourceDirectory#jsonnet
   */
  readonly jsonnet?: ApplicationOperationSyncSourceDirectoryJsonnet;

  /**
   * Recurse specifies whether to scan a directory recursively for manifests
   *
   * @schema ApplicationOperationSyncSourceDirectory#recurse
   */
  readonly recurse?: boolean;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceDirectory' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourceDirectory(obj: ApplicationOperationSyncSourceDirectory | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exclude': obj.exclude,
    'include': obj.include,
    'jsonnet': toJson_ApplicationOperationSyncSourceDirectoryJsonnet(obj.jsonnet),
    'recurse': obj.recurse,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Helm holds helm specific options
 *
 * @schema ApplicationOperationSyncSourceHelm
 */
export interface ApplicationOperationSyncSourceHelm {
  /**
   * APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default,
   * Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.
   *
   * @schema ApplicationOperationSyncSourceHelm#apiVersions
   */
  readonly apiVersions?: string[];

  /**
   * FileParameters are file parameters to the helm template
   *
   * @schema ApplicationOperationSyncSourceHelm#fileParameters
   */
  readonly fileParameters?: ApplicationOperationSyncSourceHelmFileParameters[];

  /**
   * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
   *
   * @schema ApplicationOperationSyncSourceHelm#ignoreMissingValueFiles
   */
  readonly ignoreMissingValueFiles?: boolean;

  /**
   * KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD
   * uses the Kubernetes version of the target cluster.
   *
   * @schema ApplicationOperationSyncSourceHelm#kubeVersion
   */
  readonly kubeVersion?: string;

  /**
   * Namespace is an optional namespace to template with. If left empty, defaults to the app's destination namespace.
   *
   * @schema ApplicationOperationSyncSourceHelm#namespace
   */
  readonly namespace?: string;

  /**
   * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
   *
   * @schema ApplicationOperationSyncSourceHelm#parameters
   */
  readonly parameters?: ApplicationOperationSyncSourceHelmParameters[];

  /**
   * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
   *
   * @schema ApplicationOperationSyncSourceHelm#passCredentials
   */
  readonly passCredentials?: boolean;

  /**
   * ReleaseName is the Helm release name to use. If omitted it will use the application name
   *
   * @schema ApplicationOperationSyncSourceHelm#releaseName
   */
  readonly releaseName?: string;

  /**
   * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
   *
   * @schema ApplicationOperationSyncSourceHelm#skipCrds
   */
  readonly skipCrds?: boolean;

  /**
   * SkipSchemaValidation skips JSON schema validation (Helm's --skip-schema-validation)
   *
   * @schema ApplicationOperationSyncSourceHelm#skipSchemaValidation
   */
  readonly skipSchemaValidation?: boolean;

  /**
   * SkipTests skips test manifest installation step (Helm's --skip-tests).
   *
   * @schema ApplicationOperationSyncSourceHelm#skipTests
   */
  readonly skipTests?: boolean;

  /**
   * ValuesFiles is a list of Helm value files to use when generating a template
   *
   * @schema ApplicationOperationSyncSourceHelm#valueFiles
   */
  readonly valueFiles?: string[];

  /**
   * Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
   *
   * @schema ApplicationOperationSyncSourceHelm#values
   */
  readonly values?: string;

  /**
   * ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
   *
   * @schema ApplicationOperationSyncSourceHelm#valuesObject
   */
  readonly valuesObject?: any;

  /**
   * Version is the Helm version to use for templating ("3")
   *
   * @schema ApplicationOperationSyncSourceHelm#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceHelm' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourceHelm(obj: ApplicationOperationSyncSourceHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersions': obj.apiVersions?.map(y => y),
    'fileParameters': obj.fileParameters?.map(y => toJson_ApplicationOperationSyncSourceHelmFileParameters(y)),
    'ignoreMissingValueFiles': obj.ignoreMissingValueFiles,
    'kubeVersion': obj.kubeVersion,
    'namespace': obj.namespace,
    'parameters': obj.parameters?.map(y => toJson_ApplicationOperationSyncSourceHelmParameters(y)),
    'passCredentials': obj.passCredentials,
    'releaseName': obj.releaseName,
    'skipCrds': obj.skipCrds,
    'skipSchemaValidation': obj.skipSchemaValidation,
    'skipTests': obj.skipTests,
    'valueFiles': obj.valueFiles?.map(y => y),
    'values': obj.values,
    'valuesObject': obj.valuesObject,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Kustomize holds kustomize specific options
 *
 * @schema ApplicationOperationSyncSourceKustomize
 */
export interface ApplicationOperationSyncSourceKustomize {
  /**
   * APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default,
   * Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.
   *
   * @schema ApplicationOperationSyncSourceKustomize#apiVersions
   */
  readonly apiVersions?: string[];

  /**
   * CommonAnnotations is a list of additional annotations to add to rendered manifests
   *
   * @schema ApplicationOperationSyncSourceKustomize#commonAnnotations
   */
  readonly commonAnnotations?: { [key: string]: string };

  /**
   * CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
   *
   * @schema ApplicationOperationSyncSourceKustomize#commonAnnotationsEnvsubst
   */
  readonly commonAnnotationsEnvsubst?: boolean;

  /**
   * CommonLabels is a list of additional labels to add to rendered manifests
   *
   * @schema ApplicationOperationSyncSourceKustomize#commonLabels
   */
  readonly commonLabels?: { [key: string]: string };

  /**
   * Components specifies a list of kustomize components to add to the kustomization before building
   *
   * @schema ApplicationOperationSyncSourceKustomize#components
   */
  readonly components?: string[];

  /**
   * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
   *
   * @schema ApplicationOperationSyncSourceKustomize#forceCommonAnnotations
   */
  readonly forceCommonAnnotations?: boolean;

  /**
   * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
   *
   * @schema ApplicationOperationSyncSourceKustomize#forceCommonLabels
   */
  readonly forceCommonLabels?: boolean;

  /**
   * IgnoreMissingComponents prevents kustomize from failing when components do not exist locally by not appending them to kustomization file
   *
   * @schema ApplicationOperationSyncSourceKustomize#ignoreMissingComponents
   */
  readonly ignoreMissingComponents?: boolean;

  /**
   * Images is a list of Kustomize image override specifications
   *
   * @schema ApplicationOperationSyncSourceKustomize#images
   */
  readonly images?: string[];

  /**
   * KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD
   * uses the Kubernetes version of the target cluster.
   *
   * @schema ApplicationOperationSyncSourceKustomize#kubeVersion
   */
  readonly kubeVersion?: string;

  /**
   * LabelIncludeTemplates specifies whether to apply common labels to resource templates or not
   *
   * @schema ApplicationOperationSyncSourceKustomize#labelIncludeTemplates
   */
  readonly labelIncludeTemplates?: boolean;

  /**
   * LabelWithoutSelector specifies whether to apply common labels to resource selectors or not
   *
   * @schema ApplicationOperationSyncSourceKustomize#labelWithoutSelector
   */
  readonly labelWithoutSelector?: boolean;

  /**
   * NamePrefix is a prefix appended to resources for Kustomize apps
   *
   * @schema ApplicationOperationSyncSourceKustomize#namePrefix
   */
  readonly namePrefix?: string;

  /**
   * NameSuffix is a suffix appended to resources for Kustomize apps
   *
   * @schema ApplicationOperationSyncSourceKustomize#nameSuffix
   */
  readonly nameSuffix?: string;

  /**
   * Namespace sets the namespace that Kustomize adds to all resources
   *
   * @schema ApplicationOperationSyncSourceKustomize#namespace
   */
  readonly namespace?: string;

  /**
   * Patches is a list of Kustomize patches
   *
   * @schema ApplicationOperationSyncSourceKustomize#patches
   */
  readonly patches?: ApplicationOperationSyncSourceKustomizePatches[];

  /**
   * Replicas is a list of Kustomize Replicas override specifications
   *
   * @schema ApplicationOperationSyncSourceKustomize#replicas
   */
  readonly replicas?: ApplicationOperationSyncSourceKustomizeReplicas[];

  /**
   * Version controls which version of Kustomize to use for rendering manifests
   *
   * @schema ApplicationOperationSyncSourceKustomize#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceKustomize' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourceKustomize(obj: ApplicationOperationSyncSourceKustomize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersions': obj.apiVersions?.map(y => y),
    'commonAnnotations': ((obj.commonAnnotations) === undefined) ? undefined : (Object.entries(obj.commonAnnotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'commonAnnotationsEnvsubst': obj.commonAnnotationsEnvsubst,
    'commonLabels': ((obj.commonLabels) === undefined) ? undefined : (Object.entries(obj.commonLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'components': obj.components?.map(y => y),
    'forceCommonAnnotations': obj.forceCommonAnnotations,
    'forceCommonLabels': obj.forceCommonLabels,
    'ignoreMissingComponents': obj.ignoreMissingComponents,
    'images': obj.images?.map(y => y),
    'kubeVersion': obj.kubeVersion,
    'labelIncludeTemplates': obj.labelIncludeTemplates,
    'labelWithoutSelector': obj.labelWithoutSelector,
    'namePrefix': obj.namePrefix,
    'nameSuffix': obj.nameSuffix,
    'namespace': obj.namespace,
    'patches': obj.patches?.map(y => toJson_ApplicationOperationSyncSourceKustomizePatches(y)),
    'replicas': obj.replicas?.map(y => toJson_ApplicationOperationSyncSourceKustomizeReplicas(y)),
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Plugin holds config management plugin specific options
 *
 * @schema ApplicationOperationSyncSourcePlugin
 */
export interface ApplicationOperationSyncSourcePlugin {
  /**
   * Env is a list of environment variable entries
   *
   * @schema ApplicationOperationSyncSourcePlugin#env
   */
  readonly env?: ApplicationOperationSyncSourcePluginEnv[];

  /**
   * @schema ApplicationOperationSyncSourcePlugin#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationOperationSyncSourcePlugin#parameters
   */
  readonly parameters?: ApplicationOperationSyncSourcePluginParameters[];

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcePlugin' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcePlugin(obj: ApplicationOperationSyncSourcePlugin | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'env': obj.env?.map(y => toJson_ApplicationOperationSyncSourcePluginEnv(y)),
    'name': obj.name,
    'parameters': obj.parameters?.map(y => toJson_ApplicationOperationSyncSourcePluginParameters(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Directory holds path/directory specific options
 *
 * @schema ApplicationOperationSyncSourcesDirectory
 */
export interface ApplicationOperationSyncSourcesDirectory {
  /**
   * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
   *
   * @schema ApplicationOperationSyncSourcesDirectory#exclude
   */
  readonly exclude?: string;

  /**
   * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
   *
   * @schema ApplicationOperationSyncSourcesDirectory#include
   */
  readonly include?: string;

  /**
   * Jsonnet holds options specific to Jsonnet
   *
   * @schema ApplicationOperationSyncSourcesDirectory#jsonnet
   */
  readonly jsonnet?: ApplicationOperationSyncSourcesDirectoryJsonnet;

  /**
   * Recurse specifies whether to scan a directory recursively for manifests
   *
   * @schema ApplicationOperationSyncSourcesDirectory#recurse
   */
  readonly recurse?: boolean;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcesDirectory' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcesDirectory(obj: ApplicationOperationSyncSourcesDirectory | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exclude': obj.exclude,
    'include': obj.include,
    'jsonnet': toJson_ApplicationOperationSyncSourcesDirectoryJsonnet(obj.jsonnet),
    'recurse': obj.recurse,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Helm holds helm specific options
 *
 * @schema ApplicationOperationSyncSourcesHelm
 */
export interface ApplicationOperationSyncSourcesHelm {
  /**
   * APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default,
   * Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.
   *
   * @schema ApplicationOperationSyncSourcesHelm#apiVersions
   */
  readonly apiVersions?: string[];

  /**
   * FileParameters are file parameters to the helm template
   *
   * @schema ApplicationOperationSyncSourcesHelm#fileParameters
   */
  readonly fileParameters?: ApplicationOperationSyncSourcesHelmFileParameters[];

  /**
   * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
   *
   * @schema ApplicationOperationSyncSourcesHelm#ignoreMissingValueFiles
   */
  readonly ignoreMissingValueFiles?: boolean;

  /**
   * KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD
   * uses the Kubernetes version of the target cluster.
   *
   * @schema ApplicationOperationSyncSourcesHelm#kubeVersion
   */
  readonly kubeVersion?: string;

  /**
   * Namespace is an optional namespace to template with. If left empty, defaults to the app's destination namespace.
   *
   * @schema ApplicationOperationSyncSourcesHelm#namespace
   */
  readonly namespace?: string;

  /**
   * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
   *
   * @schema ApplicationOperationSyncSourcesHelm#parameters
   */
  readonly parameters?: ApplicationOperationSyncSourcesHelmParameters[];

  /**
   * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
   *
   * @schema ApplicationOperationSyncSourcesHelm#passCredentials
   */
  readonly passCredentials?: boolean;

  /**
   * ReleaseName is the Helm release name to use. If omitted it will use the application name
   *
   * @schema ApplicationOperationSyncSourcesHelm#releaseName
   */
  readonly releaseName?: string;

  /**
   * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
   *
   * @schema ApplicationOperationSyncSourcesHelm#skipCrds
   */
  readonly skipCrds?: boolean;

  /**
   * SkipSchemaValidation skips JSON schema validation (Helm's --skip-schema-validation)
   *
   * @schema ApplicationOperationSyncSourcesHelm#skipSchemaValidation
   */
  readonly skipSchemaValidation?: boolean;

  /**
   * SkipTests skips test manifest installation step (Helm's --skip-tests).
   *
   * @schema ApplicationOperationSyncSourcesHelm#skipTests
   */
  readonly skipTests?: boolean;

  /**
   * ValuesFiles is a list of Helm value files to use when generating a template
   *
   * @schema ApplicationOperationSyncSourcesHelm#valueFiles
   */
  readonly valueFiles?: string[];

  /**
   * Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
   *
   * @schema ApplicationOperationSyncSourcesHelm#values
   */
  readonly values?: string;

  /**
   * ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
   *
   * @schema ApplicationOperationSyncSourcesHelm#valuesObject
   */
  readonly valuesObject?: any;

  /**
   * Version is the Helm version to use for templating ("3")
   *
   * @schema ApplicationOperationSyncSourcesHelm#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcesHelm' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcesHelm(obj: ApplicationOperationSyncSourcesHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersions': obj.apiVersions?.map(y => y),
    'fileParameters': obj.fileParameters?.map(y => toJson_ApplicationOperationSyncSourcesHelmFileParameters(y)),
    'ignoreMissingValueFiles': obj.ignoreMissingValueFiles,
    'kubeVersion': obj.kubeVersion,
    'namespace': obj.namespace,
    'parameters': obj.parameters?.map(y => toJson_ApplicationOperationSyncSourcesHelmParameters(y)),
    'passCredentials': obj.passCredentials,
    'releaseName': obj.releaseName,
    'skipCrds': obj.skipCrds,
    'skipSchemaValidation': obj.skipSchemaValidation,
    'skipTests': obj.skipTests,
    'valueFiles': obj.valueFiles?.map(y => y),
    'values': obj.values,
    'valuesObject': obj.valuesObject,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Kustomize holds kustomize specific options
 *
 * @schema ApplicationOperationSyncSourcesKustomize
 */
export interface ApplicationOperationSyncSourcesKustomize {
  /**
   * APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default,
   * Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.
   *
   * @schema ApplicationOperationSyncSourcesKustomize#apiVersions
   */
  readonly apiVersions?: string[];

  /**
   * CommonAnnotations is a list of additional annotations to add to rendered manifests
   *
   * @schema ApplicationOperationSyncSourcesKustomize#commonAnnotations
   */
  readonly commonAnnotations?: { [key: string]: string };

  /**
   * CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
   *
   * @schema ApplicationOperationSyncSourcesKustomize#commonAnnotationsEnvsubst
   */
  readonly commonAnnotationsEnvsubst?: boolean;

  /**
   * CommonLabels is a list of additional labels to add to rendered manifests
   *
   * @schema ApplicationOperationSyncSourcesKustomize#commonLabels
   */
  readonly commonLabels?: { [key: string]: string };

  /**
   * Components specifies a list of kustomize components to add to the kustomization before building
   *
   * @schema ApplicationOperationSyncSourcesKustomize#components
   */
  readonly components?: string[];

  /**
   * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
   *
   * @schema ApplicationOperationSyncSourcesKustomize#forceCommonAnnotations
   */
  readonly forceCommonAnnotations?: boolean;

  /**
   * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
   *
   * @schema ApplicationOperationSyncSourcesKustomize#forceCommonLabels
   */
  readonly forceCommonLabels?: boolean;

  /**
   * IgnoreMissingComponents prevents kustomize from failing when components do not exist locally by not appending them to kustomization file
   *
   * @schema ApplicationOperationSyncSourcesKustomize#ignoreMissingComponents
   */
  readonly ignoreMissingComponents?: boolean;

  /**
   * Images is a list of Kustomize image override specifications
   *
   * @schema ApplicationOperationSyncSourcesKustomize#images
   */
  readonly images?: string[];

  /**
   * KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD
   * uses the Kubernetes version of the target cluster.
   *
   * @schema ApplicationOperationSyncSourcesKustomize#kubeVersion
   */
  readonly kubeVersion?: string;

  /**
   * LabelIncludeTemplates specifies whether to apply common labels to resource templates or not
   *
   * @schema ApplicationOperationSyncSourcesKustomize#labelIncludeTemplates
   */
  readonly labelIncludeTemplates?: boolean;

  /**
   * LabelWithoutSelector specifies whether to apply common labels to resource selectors or not
   *
   * @schema ApplicationOperationSyncSourcesKustomize#labelWithoutSelector
   */
  readonly labelWithoutSelector?: boolean;

  /**
   * NamePrefix is a prefix appended to resources for Kustomize apps
   *
   * @schema ApplicationOperationSyncSourcesKustomize#namePrefix
   */
  readonly namePrefix?: string;

  /**
   * NameSuffix is a suffix appended to resources for Kustomize apps
   *
   * @schema ApplicationOperationSyncSourcesKustomize#nameSuffix
   */
  readonly nameSuffix?: string;

  /**
   * Namespace sets the namespace that Kustomize adds to all resources
   *
   * @schema ApplicationOperationSyncSourcesKustomize#namespace
   */
  readonly namespace?: string;

  /**
   * Patches is a list of Kustomize patches
   *
   * @schema ApplicationOperationSyncSourcesKustomize#patches
   */
  readonly patches?: ApplicationOperationSyncSourcesKustomizePatches[];

  /**
   * Replicas is a list of Kustomize Replicas override specifications
   *
   * @schema ApplicationOperationSyncSourcesKustomize#replicas
   */
  readonly replicas?: ApplicationOperationSyncSourcesKustomizeReplicas[];

  /**
   * Version controls which version of Kustomize to use for rendering manifests
   *
   * @schema ApplicationOperationSyncSourcesKustomize#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcesKustomize' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcesKustomize(obj: ApplicationOperationSyncSourcesKustomize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersions': obj.apiVersions?.map(y => y),
    'commonAnnotations': ((obj.commonAnnotations) === undefined) ? undefined : (Object.entries(obj.commonAnnotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'commonAnnotationsEnvsubst': obj.commonAnnotationsEnvsubst,
    'commonLabels': ((obj.commonLabels) === undefined) ? undefined : (Object.entries(obj.commonLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'components': obj.components?.map(y => y),
    'forceCommonAnnotations': obj.forceCommonAnnotations,
    'forceCommonLabels': obj.forceCommonLabels,
    'ignoreMissingComponents': obj.ignoreMissingComponents,
    'images': obj.images?.map(y => y),
    'kubeVersion': obj.kubeVersion,
    'labelIncludeTemplates': obj.labelIncludeTemplates,
    'labelWithoutSelector': obj.labelWithoutSelector,
    'namePrefix': obj.namePrefix,
    'nameSuffix': obj.nameSuffix,
    'namespace': obj.namespace,
    'patches': obj.patches?.map(y => toJson_ApplicationOperationSyncSourcesKustomizePatches(y)),
    'replicas': obj.replicas?.map(y => toJson_ApplicationOperationSyncSourcesKustomizeReplicas(y)),
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Plugin holds config management plugin specific options
 *
 * @schema ApplicationOperationSyncSourcesPlugin
 */
export interface ApplicationOperationSyncSourcesPlugin {
  /**
   * Env is a list of environment variable entries
   *
   * @schema ApplicationOperationSyncSourcesPlugin#env
   */
  readonly env?: ApplicationOperationSyncSourcesPluginEnv[];

  /**
   * @schema ApplicationOperationSyncSourcesPlugin#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationOperationSyncSourcesPlugin#parameters
   */
  readonly parameters?: ApplicationOperationSyncSourcesPluginParameters[];

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcesPlugin' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcesPlugin(obj: ApplicationOperationSyncSourcesPlugin | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'env': obj.env?.map(y => toJson_ApplicationOperationSyncSourcesPluginEnv(y)),
    'name': obj.name,
    'parameters': obj.parameters?.map(y => toJson_ApplicationOperationSyncSourcesPluginParameters(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Apply will perform a `kubectl apply` to perform the sync.
 *
 * @schema ApplicationOperationSyncSyncStrategyApply
 */
export interface ApplicationOperationSyncSyncStrategyApply {
  /**
   * Force indicates whether or not to supply the --force flag to `kubectl apply`.
   * The --force flag deletes and re-create the resource, when PATCH encounters conflict and has
   * retried for 5 times.
   *
   * @schema ApplicationOperationSyncSyncStrategyApply#force
   */
  readonly force?: boolean;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSyncStrategyApply' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSyncStrategyApply(obj: ApplicationOperationSyncSyncStrategyApply | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'force': obj.force,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Hook will submit any referenced resources to perform the sync. This is the default strategy
 *
 * @schema ApplicationOperationSyncSyncStrategyHook
 */
export interface ApplicationOperationSyncSyncStrategyHook {
  /**
   * Force indicates whether or not to supply the --force flag to `kubectl apply`.
   * The --force flag deletes and re-create the resource, when PATCH encounters conflict and has
   * retried for 5 times.
   *
   * @schema ApplicationOperationSyncSyncStrategyHook#force
   */
  readonly force?: boolean;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSyncStrategyHook' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSyncStrategyHook(obj: ApplicationOperationSyncSyncStrategyHook | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'force': obj.force,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Jsonnet holds options specific to Jsonnet
 *
 * @schema ApplicationSpecSourceDirectoryJsonnet
 */
export interface ApplicationSpecSourceDirectoryJsonnet {
  /**
   * ExtVars is a list of Jsonnet External Variables
   *
   * @schema ApplicationSpecSourceDirectoryJsonnet#extVars
   */
  readonly extVars?: ApplicationSpecSourceDirectoryJsonnetExtVars[];

  /**
   * Additional library search dirs
   *
   * @schema ApplicationSpecSourceDirectoryJsonnet#libs
   */
  readonly libs?: string[];

  /**
   * TLAS is a list of Jsonnet Top-level Arguments
   *
   * @schema ApplicationSpecSourceDirectoryJsonnet#tlas
   */
  readonly tlas?: ApplicationSpecSourceDirectoryJsonnetTlas[];

}

/**
 * Converts an object of type 'ApplicationSpecSourceDirectoryJsonnet' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceDirectoryJsonnet(obj: ApplicationSpecSourceDirectoryJsonnet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'extVars': obj.extVars?.map(y => toJson_ApplicationSpecSourceDirectoryJsonnetExtVars(y)),
    'libs': obj.libs?.map(y => y),
    'tlas': obj.tlas?.map(y => toJson_ApplicationSpecSourceDirectoryJsonnetTlas(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
 *
 * @schema ApplicationSpecSourceHelmFileParameters
 */
export interface ApplicationSpecSourceHelmFileParameters {
  /**
   * Name is the name of the Helm parameter
   *
   * @schema ApplicationSpecSourceHelmFileParameters#name
   */
  readonly name?: string;

  /**
   * Path is the path to the file containing the values for the Helm parameter
   *
   * @schema ApplicationSpecSourceHelmFileParameters#path
   */
  readonly path?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceHelmFileParameters' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceHelmFileParameters(obj: ApplicationSpecSourceHelmFileParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * HelmParameter is a parameter that's passed to helm template during manifest generation
 *
 * @schema ApplicationSpecSourceHelmParameters
 */
export interface ApplicationSpecSourceHelmParameters {
  /**
   * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
   *
   * @schema ApplicationSpecSourceHelmParameters#forceString
   */
  readonly forceString?: boolean;

  /**
   * Name is the name of the Helm parameter
   *
   * @schema ApplicationSpecSourceHelmParameters#name
   */
  readonly name?: string;

  /**
   * Value is the value for the Helm parameter
   *
   * @schema ApplicationSpecSourceHelmParameters#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceHelmParameters' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceHelmParameters(obj: ApplicationSpecSourceHelmParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'forceString': obj.forceString,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationSpecSourceKustomizePatches
 */
export interface ApplicationSpecSourceKustomizePatches {
  /**
   * @schema ApplicationSpecSourceKustomizePatches#options
   */
  readonly options?: { [key: string]: boolean };

  /**
   * @schema ApplicationSpecSourceKustomizePatches#patch
   */
  readonly patch?: string;

  /**
   * @schema ApplicationSpecSourceKustomizePatches#path
   */
  readonly path?: string;

  /**
   * @schema ApplicationSpecSourceKustomizePatches#target
   */
  readonly target?: ApplicationSpecSourceKustomizePatchesTarget;

}

/**
 * Converts an object of type 'ApplicationSpecSourceKustomizePatches' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceKustomizePatches(obj: ApplicationSpecSourceKustomizePatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'options': ((obj.options) === undefined) ? undefined : (Object.entries(obj.options).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'patch': obj.patch,
    'path': obj.path,
    'target': toJson_ApplicationSpecSourceKustomizePatchesTarget(obj.target),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationSpecSourceKustomizeReplicas
 */
export interface ApplicationSpecSourceKustomizeReplicas {
  /**
   * Number of replicas
   *
   * @schema ApplicationSpecSourceKustomizeReplicas#count
   */
  readonly count: ApplicationSpecSourceKustomizeReplicasCount;

  /**
   * Name of Deployment or StatefulSet
   *
   * @schema ApplicationSpecSourceKustomizeReplicas#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceKustomizeReplicas' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceKustomizeReplicas(obj: ApplicationSpecSourceKustomizeReplicas | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'count': obj.count?.value,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * EnvEntry represents an entry in the application's environment
 *
 * @schema ApplicationSpecSourcePluginEnv
 */
export interface ApplicationSpecSourcePluginEnv {
  /**
   * Name is the name of the variable, usually expressed in uppercase
   *
   * @schema ApplicationSpecSourcePluginEnv#name
   */
  readonly name: string;

  /**
   * Value is the value of the variable
   *
   * @schema ApplicationSpecSourcePluginEnv#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourcePluginEnv' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcePluginEnv(obj: ApplicationSpecSourcePluginEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationSpecSourcePluginParameters
 */
export interface ApplicationSpecSourcePluginParameters {
  /**
   * Array is the value of an array type parameter.
   *
   * @schema ApplicationSpecSourcePluginParameters#array
   */
  readonly array?: string[];

  /**
   * Map is the value of a map type parameter.
   *
   * @schema ApplicationSpecSourcePluginParameters#map
   */
  readonly map?: { [key: string]: string };

  /**
   * Name is the name identifying a parameter.
   *
   * @schema ApplicationSpecSourcePluginParameters#name
   */
  readonly name?: string;

  /**
   * String_ is the value of a string type parameter.
   *
   * @schema ApplicationSpecSourcePluginParameters#string
   */
  readonly string?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourcePluginParameters' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcePluginParameters(obj: ApplicationSpecSourcePluginParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'array': obj.array?.map(y => y),
    'map': ((obj.map) === undefined) ? undefined : (Object.entries(obj.map).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'string': obj.string,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Jsonnet holds options specific to Jsonnet
 *
 * @schema ApplicationSpecSourcesDirectoryJsonnet
 */
export interface ApplicationSpecSourcesDirectoryJsonnet {
  /**
   * ExtVars is a list of Jsonnet External Variables
   *
   * @schema ApplicationSpecSourcesDirectoryJsonnet#extVars
   */
  readonly extVars?: ApplicationSpecSourcesDirectoryJsonnetExtVars[];

  /**
   * Additional library search dirs
   *
   * @schema ApplicationSpecSourcesDirectoryJsonnet#libs
   */
  readonly libs?: string[];

  /**
   * TLAS is a list of Jsonnet Top-level Arguments
   *
   * @schema ApplicationSpecSourcesDirectoryJsonnet#tlas
   */
  readonly tlas?: ApplicationSpecSourcesDirectoryJsonnetTlas[];

}

/**
 * Converts an object of type 'ApplicationSpecSourcesDirectoryJsonnet' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcesDirectoryJsonnet(obj: ApplicationSpecSourcesDirectoryJsonnet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'extVars': obj.extVars?.map(y => toJson_ApplicationSpecSourcesDirectoryJsonnetExtVars(y)),
    'libs': obj.libs?.map(y => y),
    'tlas': obj.tlas?.map(y => toJson_ApplicationSpecSourcesDirectoryJsonnetTlas(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
 *
 * @schema ApplicationSpecSourcesHelmFileParameters
 */
export interface ApplicationSpecSourcesHelmFileParameters {
  /**
   * Name is the name of the Helm parameter
   *
   * @schema ApplicationSpecSourcesHelmFileParameters#name
   */
  readonly name?: string;

  /**
   * Path is the path to the file containing the values for the Helm parameter
   *
   * @schema ApplicationSpecSourcesHelmFileParameters#path
   */
  readonly path?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourcesHelmFileParameters' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcesHelmFileParameters(obj: ApplicationSpecSourcesHelmFileParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * HelmParameter is a parameter that's passed to helm template during manifest generation
 *
 * @schema ApplicationSpecSourcesHelmParameters
 */
export interface ApplicationSpecSourcesHelmParameters {
  /**
   * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
   *
   * @schema ApplicationSpecSourcesHelmParameters#forceString
   */
  readonly forceString?: boolean;

  /**
   * Name is the name of the Helm parameter
   *
   * @schema ApplicationSpecSourcesHelmParameters#name
   */
  readonly name?: string;

  /**
   * Value is the value for the Helm parameter
   *
   * @schema ApplicationSpecSourcesHelmParameters#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourcesHelmParameters' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcesHelmParameters(obj: ApplicationSpecSourcesHelmParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'forceString': obj.forceString,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationSpecSourcesKustomizePatches
 */
export interface ApplicationSpecSourcesKustomizePatches {
  /**
   * @schema ApplicationSpecSourcesKustomizePatches#options
   */
  readonly options?: { [key: string]: boolean };

  /**
   * @schema ApplicationSpecSourcesKustomizePatches#patch
   */
  readonly patch?: string;

  /**
   * @schema ApplicationSpecSourcesKustomizePatches#path
   */
  readonly path?: string;

  /**
   * @schema ApplicationSpecSourcesKustomizePatches#target
   */
  readonly target?: ApplicationSpecSourcesKustomizePatchesTarget;

}

/**
 * Converts an object of type 'ApplicationSpecSourcesKustomizePatches' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcesKustomizePatches(obj: ApplicationSpecSourcesKustomizePatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'options': ((obj.options) === undefined) ? undefined : (Object.entries(obj.options).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'patch': obj.patch,
    'path': obj.path,
    'target': toJson_ApplicationSpecSourcesKustomizePatchesTarget(obj.target),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationSpecSourcesKustomizeReplicas
 */
export interface ApplicationSpecSourcesKustomizeReplicas {
  /**
   * Number of replicas
   *
   * @schema ApplicationSpecSourcesKustomizeReplicas#count
   */
  readonly count: ApplicationSpecSourcesKustomizeReplicasCount;

  /**
   * Name of Deployment or StatefulSet
   *
   * @schema ApplicationSpecSourcesKustomizeReplicas#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourcesKustomizeReplicas' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcesKustomizeReplicas(obj: ApplicationSpecSourcesKustomizeReplicas | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'count': obj.count?.value,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * EnvEntry represents an entry in the application's environment
 *
 * @schema ApplicationSpecSourcesPluginEnv
 */
export interface ApplicationSpecSourcesPluginEnv {
  /**
   * Name is the name of the variable, usually expressed in uppercase
   *
   * @schema ApplicationSpecSourcesPluginEnv#name
   */
  readonly name: string;

  /**
   * Value is the value of the variable
   *
   * @schema ApplicationSpecSourcesPluginEnv#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourcesPluginEnv' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcesPluginEnv(obj: ApplicationSpecSourcesPluginEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationSpecSourcesPluginParameters
 */
export interface ApplicationSpecSourcesPluginParameters {
  /**
   * Array is the value of an array type parameter.
   *
   * @schema ApplicationSpecSourcesPluginParameters#array
   */
  readonly array?: string[];

  /**
   * Map is the value of a map type parameter.
   *
   * @schema ApplicationSpecSourcesPluginParameters#map
   */
  readonly map?: { [key: string]: string };

  /**
   * Name is the name identifying a parameter.
   *
   * @schema ApplicationSpecSourcesPluginParameters#name
   */
  readonly name?: string;

  /**
   * String_ is the value of a string type parameter.
   *
   * @schema ApplicationSpecSourcesPluginParameters#string
   */
  readonly string?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourcesPluginParameters' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcesPluginParameters(obj: ApplicationSpecSourcesPluginParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'array': obj.array?.map(y => y),
    'map': ((obj.map) === undefined) ? undefined : (Object.entries(obj.map).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'string': obj.string,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Backoff controls how to backoff on subsequent retries of failed syncs
 *
 * @schema ApplicationSpecSyncPolicyRetryBackoff
 */
export interface ApplicationSpecSyncPolicyRetryBackoff {
  /**
   * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
   *
   * @schema ApplicationSpecSyncPolicyRetryBackoff#duration
   */
  readonly duration?: string;

  /**
   * Factor is a factor to multiply the base duration after each failed retry
   *
   * @schema ApplicationSpecSyncPolicyRetryBackoff#factor
   */
  readonly factor?: number;

  /**
   * MaxDuration is the maximum amount of time allowed for the backoff strategy
   *
   * @schema ApplicationSpecSyncPolicyRetryBackoff#maxDuration
   */
  readonly maxDuration?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSyncPolicyRetryBackoff' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSyncPolicyRetryBackoff(obj: ApplicationSpecSyncPolicyRetryBackoff | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'duration': obj.duration,
    'factor': obj.factor,
    'maxDuration': obj.maxDuration,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Jsonnet holds options specific to Jsonnet
 *
 * @schema ApplicationOperationSyncSourceDirectoryJsonnet
 */
export interface ApplicationOperationSyncSourceDirectoryJsonnet {
  /**
   * ExtVars is a list of Jsonnet External Variables
   *
   * @schema ApplicationOperationSyncSourceDirectoryJsonnet#extVars
   */
  readonly extVars?: ApplicationOperationSyncSourceDirectoryJsonnetExtVars[];

  /**
   * Additional library search dirs
   *
   * @schema ApplicationOperationSyncSourceDirectoryJsonnet#libs
   */
  readonly libs?: string[];

  /**
   * TLAS is a list of Jsonnet Top-level Arguments
   *
   * @schema ApplicationOperationSyncSourceDirectoryJsonnet#tlas
   */
  readonly tlas?: ApplicationOperationSyncSourceDirectoryJsonnetTlas[];

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceDirectoryJsonnet' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourceDirectoryJsonnet(obj: ApplicationOperationSyncSourceDirectoryJsonnet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'extVars': obj.extVars?.map(y => toJson_ApplicationOperationSyncSourceDirectoryJsonnetExtVars(y)),
    'libs': obj.libs?.map(y => y),
    'tlas': obj.tlas?.map(y => toJson_ApplicationOperationSyncSourceDirectoryJsonnetTlas(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
 *
 * @schema ApplicationOperationSyncSourceHelmFileParameters
 */
export interface ApplicationOperationSyncSourceHelmFileParameters {
  /**
   * Name is the name of the Helm parameter
   *
   * @schema ApplicationOperationSyncSourceHelmFileParameters#name
   */
  readonly name?: string;

  /**
   * Path is the path to the file containing the values for the Helm parameter
   *
   * @schema ApplicationOperationSyncSourceHelmFileParameters#path
   */
  readonly path?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceHelmFileParameters' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourceHelmFileParameters(obj: ApplicationOperationSyncSourceHelmFileParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * HelmParameter is a parameter that's passed to helm template during manifest generation
 *
 * @schema ApplicationOperationSyncSourceHelmParameters
 */
export interface ApplicationOperationSyncSourceHelmParameters {
  /**
   * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
   *
   * @schema ApplicationOperationSyncSourceHelmParameters#forceString
   */
  readonly forceString?: boolean;

  /**
   * Name is the name of the Helm parameter
   *
   * @schema ApplicationOperationSyncSourceHelmParameters#name
   */
  readonly name?: string;

  /**
   * Value is the value for the Helm parameter
   *
   * @schema ApplicationOperationSyncSourceHelmParameters#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceHelmParameters' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourceHelmParameters(obj: ApplicationOperationSyncSourceHelmParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'forceString': obj.forceString,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationOperationSyncSourceKustomizePatches
 */
export interface ApplicationOperationSyncSourceKustomizePatches {
  /**
   * @schema ApplicationOperationSyncSourceKustomizePatches#options
   */
  readonly options?: { [key: string]: boolean };

  /**
   * @schema ApplicationOperationSyncSourceKustomizePatches#patch
   */
  readonly patch?: string;

  /**
   * @schema ApplicationOperationSyncSourceKustomizePatches#path
   */
  readonly path?: string;

  /**
   * @schema ApplicationOperationSyncSourceKustomizePatches#target
   */
  readonly target?: ApplicationOperationSyncSourceKustomizePatchesTarget;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceKustomizePatches' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourceKustomizePatches(obj: ApplicationOperationSyncSourceKustomizePatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'options': ((obj.options) === undefined) ? undefined : (Object.entries(obj.options).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'patch': obj.patch,
    'path': obj.path,
    'target': toJson_ApplicationOperationSyncSourceKustomizePatchesTarget(obj.target),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationOperationSyncSourceKustomizeReplicas
 */
export interface ApplicationOperationSyncSourceKustomizeReplicas {
  /**
   * Number of replicas
   *
   * @schema ApplicationOperationSyncSourceKustomizeReplicas#count
   */
  readonly count: ApplicationOperationSyncSourceKustomizeReplicasCount;

  /**
   * Name of Deployment or StatefulSet
   *
   * @schema ApplicationOperationSyncSourceKustomizeReplicas#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceKustomizeReplicas' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourceKustomizeReplicas(obj: ApplicationOperationSyncSourceKustomizeReplicas | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'count': obj.count?.value,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * EnvEntry represents an entry in the application's environment
 *
 * @schema ApplicationOperationSyncSourcePluginEnv
 */
export interface ApplicationOperationSyncSourcePluginEnv {
  /**
   * Name is the name of the variable, usually expressed in uppercase
   *
   * @schema ApplicationOperationSyncSourcePluginEnv#name
   */
  readonly name: string;

  /**
   * Value is the value of the variable
   *
   * @schema ApplicationOperationSyncSourcePluginEnv#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcePluginEnv' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcePluginEnv(obj: ApplicationOperationSyncSourcePluginEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationOperationSyncSourcePluginParameters
 */
export interface ApplicationOperationSyncSourcePluginParameters {
  /**
   * Array is the value of an array type parameter.
   *
   * @schema ApplicationOperationSyncSourcePluginParameters#array
   */
  readonly array?: string[];

  /**
   * Map is the value of a map type parameter.
   *
   * @schema ApplicationOperationSyncSourcePluginParameters#map
   */
  readonly map?: { [key: string]: string };

  /**
   * Name is the name identifying a parameter.
   *
   * @schema ApplicationOperationSyncSourcePluginParameters#name
   */
  readonly name?: string;

  /**
   * String_ is the value of a string type parameter.
   *
   * @schema ApplicationOperationSyncSourcePluginParameters#string
   */
  readonly string?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcePluginParameters' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcePluginParameters(obj: ApplicationOperationSyncSourcePluginParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'array': obj.array?.map(y => y),
    'map': ((obj.map) === undefined) ? undefined : (Object.entries(obj.map).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'string': obj.string,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Jsonnet holds options specific to Jsonnet
 *
 * @schema ApplicationOperationSyncSourcesDirectoryJsonnet
 */
export interface ApplicationOperationSyncSourcesDirectoryJsonnet {
  /**
   * ExtVars is a list of Jsonnet External Variables
   *
   * @schema ApplicationOperationSyncSourcesDirectoryJsonnet#extVars
   */
  readonly extVars?: ApplicationOperationSyncSourcesDirectoryJsonnetExtVars[];

  /**
   * Additional library search dirs
   *
   * @schema ApplicationOperationSyncSourcesDirectoryJsonnet#libs
   */
  readonly libs?: string[];

  /**
   * TLAS is a list of Jsonnet Top-level Arguments
   *
   * @schema ApplicationOperationSyncSourcesDirectoryJsonnet#tlas
   */
  readonly tlas?: ApplicationOperationSyncSourcesDirectoryJsonnetTlas[];

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcesDirectoryJsonnet' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcesDirectoryJsonnet(obj: ApplicationOperationSyncSourcesDirectoryJsonnet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'extVars': obj.extVars?.map(y => toJson_ApplicationOperationSyncSourcesDirectoryJsonnetExtVars(y)),
    'libs': obj.libs?.map(y => y),
    'tlas': obj.tlas?.map(y => toJson_ApplicationOperationSyncSourcesDirectoryJsonnetTlas(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
 *
 * @schema ApplicationOperationSyncSourcesHelmFileParameters
 */
export interface ApplicationOperationSyncSourcesHelmFileParameters {
  /**
   * Name is the name of the Helm parameter
   *
   * @schema ApplicationOperationSyncSourcesHelmFileParameters#name
   */
  readonly name?: string;

  /**
   * Path is the path to the file containing the values for the Helm parameter
   *
   * @schema ApplicationOperationSyncSourcesHelmFileParameters#path
   */
  readonly path?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcesHelmFileParameters' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcesHelmFileParameters(obj: ApplicationOperationSyncSourcesHelmFileParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * HelmParameter is a parameter that's passed to helm template during manifest generation
 *
 * @schema ApplicationOperationSyncSourcesHelmParameters
 */
export interface ApplicationOperationSyncSourcesHelmParameters {
  /**
   * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
   *
   * @schema ApplicationOperationSyncSourcesHelmParameters#forceString
   */
  readonly forceString?: boolean;

  /**
   * Name is the name of the Helm parameter
   *
   * @schema ApplicationOperationSyncSourcesHelmParameters#name
   */
  readonly name?: string;

  /**
   * Value is the value for the Helm parameter
   *
   * @schema ApplicationOperationSyncSourcesHelmParameters#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcesHelmParameters' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcesHelmParameters(obj: ApplicationOperationSyncSourcesHelmParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'forceString': obj.forceString,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationOperationSyncSourcesKustomizePatches
 */
export interface ApplicationOperationSyncSourcesKustomizePatches {
  /**
   * @schema ApplicationOperationSyncSourcesKustomizePatches#options
   */
  readonly options?: { [key: string]: boolean };

  /**
   * @schema ApplicationOperationSyncSourcesKustomizePatches#patch
   */
  readonly patch?: string;

  /**
   * @schema ApplicationOperationSyncSourcesKustomizePatches#path
   */
  readonly path?: string;

  /**
   * @schema ApplicationOperationSyncSourcesKustomizePatches#target
   */
  readonly target?: ApplicationOperationSyncSourcesKustomizePatchesTarget;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcesKustomizePatches' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcesKustomizePatches(obj: ApplicationOperationSyncSourcesKustomizePatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'options': ((obj.options) === undefined) ? undefined : (Object.entries(obj.options).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'patch': obj.patch,
    'path': obj.path,
    'target': toJson_ApplicationOperationSyncSourcesKustomizePatchesTarget(obj.target),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationOperationSyncSourcesKustomizeReplicas
 */
export interface ApplicationOperationSyncSourcesKustomizeReplicas {
  /**
   * Number of replicas
   *
   * @schema ApplicationOperationSyncSourcesKustomizeReplicas#count
   */
  readonly count: ApplicationOperationSyncSourcesKustomizeReplicasCount;

  /**
   * Name of Deployment or StatefulSet
   *
   * @schema ApplicationOperationSyncSourcesKustomizeReplicas#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcesKustomizeReplicas' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcesKustomizeReplicas(obj: ApplicationOperationSyncSourcesKustomizeReplicas | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'count': obj.count?.value,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * EnvEntry represents an entry in the application's environment
 *
 * @schema ApplicationOperationSyncSourcesPluginEnv
 */
export interface ApplicationOperationSyncSourcesPluginEnv {
  /**
   * Name is the name of the variable, usually expressed in uppercase
   *
   * @schema ApplicationOperationSyncSourcesPluginEnv#name
   */
  readonly name: string;

  /**
   * Value is the value of the variable
   *
   * @schema ApplicationOperationSyncSourcesPluginEnv#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcesPluginEnv' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcesPluginEnv(obj: ApplicationOperationSyncSourcesPluginEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationOperationSyncSourcesPluginParameters
 */
export interface ApplicationOperationSyncSourcesPluginParameters {
  /**
   * Array is the value of an array type parameter.
   *
   * @schema ApplicationOperationSyncSourcesPluginParameters#array
   */
  readonly array?: string[];

  /**
   * Map is the value of a map type parameter.
   *
   * @schema ApplicationOperationSyncSourcesPluginParameters#map
   */
  readonly map?: { [key: string]: string };

  /**
   * Name is the name identifying a parameter.
   *
   * @schema ApplicationOperationSyncSourcesPluginParameters#name
   */
  readonly name?: string;

  /**
   * String_ is the value of a string type parameter.
   *
   * @schema ApplicationOperationSyncSourcesPluginParameters#string
   */
  readonly string?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcesPluginParameters' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcesPluginParameters(obj: ApplicationOperationSyncSourcesPluginParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'array': obj.array?.map(y => y),
    'map': ((obj.map) === undefined) ? undefined : (Object.entries(obj.map).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'string': obj.string,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
 *
 * @schema ApplicationSpecSourceDirectoryJsonnetExtVars
 */
export interface ApplicationSpecSourceDirectoryJsonnetExtVars {
  /**
   * @schema ApplicationSpecSourceDirectoryJsonnetExtVars#code
   */
  readonly code?: boolean;

  /**
   * @schema ApplicationSpecSourceDirectoryJsonnetExtVars#name
   */
  readonly name: string;

  /**
   * @schema ApplicationSpecSourceDirectoryJsonnetExtVars#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceDirectoryJsonnetExtVars' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceDirectoryJsonnetExtVars(obj: ApplicationSpecSourceDirectoryJsonnetExtVars | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'code': obj.code,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
 *
 * @schema ApplicationSpecSourceDirectoryJsonnetTlas
 */
export interface ApplicationSpecSourceDirectoryJsonnetTlas {
  /**
   * @schema ApplicationSpecSourceDirectoryJsonnetTlas#code
   */
  readonly code?: boolean;

  /**
   * @schema ApplicationSpecSourceDirectoryJsonnetTlas#name
   */
  readonly name: string;

  /**
   * @schema ApplicationSpecSourceDirectoryJsonnetTlas#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceDirectoryJsonnetTlas' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceDirectoryJsonnetTlas(obj: ApplicationSpecSourceDirectoryJsonnetTlas | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'code': obj.code,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationSpecSourceKustomizePatchesTarget
 */
export interface ApplicationSpecSourceKustomizePatchesTarget {
  /**
   * @schema ApplicationSpecSourceKustomizePatchesTarget#annotationSelector
   */
  readonly annotationSelector?: string;

  /**
   * @schema ApplicationSpecSourceKustomizePatchesTarget#group
   */
  readonly group?: string;

  /**
   * @schema ApplicationSpecSourceKustomizePatchesTarget#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationSpecSourceKustomizePatchesTarget#labelSelector
   */
  readonly labelSelector?: string;

  /**
   * @schema ApplicationSpecSourceKustomizePatchesTarget#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationSpecSourceKustomizePatchesTarget#namespace
   */
  readonly namespace?: string;

  /**
   * @schema ApplicationSpecSourceKustomizePatchesTarget#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceKustomizePatchesTarget' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourceKustomizePatchesTarget(obj: ApplicationSpecSourceKustomizePatchesTarget | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotationSelector': obj.annotationSelector,
    'group': obj.group,
    'kind': obj.kind,
    'labelSelector': obj.labelSelector,
    'name': obj.name,
    'namespace': obj.namespace,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Number of replicas
 *
 * @schema ApplicationSpecSourceKustomizeReplicasCount
 */
export class ApplicationSpecSourceKustomizeReplicasCount {
  public static fromNumber(value: number): ApplicationSpecSourceKustomizeReplicasCount {
    return new ApplicationSpecSourceKustomizeReplicasCount(value);
  }
  public static fromString(value: string): ApplicationSpecSourceKustomizeReplicasCount {
    return new ApplicationSpecSourceKustomizeReplicasCount(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
 *
 * @schema ApplicationSpecSourcesDirectoryJsonnetExtVars
 */
export interface ApplicationSpecSourcesDirectoryJsonnetExtVars {
  /**
   * @schema ApplicationSpecSourcesDirectoryJsonnetExtVars#code
   */
  readonly code?: boolean;

  /**
   * @schema ApplicationSpecSourcesDirectoryJsonnetExtVars#name
   */
  readonly name: string;

  /**
   * @schema ApplicationSpecSourcesDirectoryJsonnetExtVars#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourcesDirectoryJsonnetExtVars' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcesDirectoryJsonnetExtVars(obj: ApplicationSpecSourcesDirectoryJsonnetExtVars | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'code': obj.code,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
 *
 * @schema ApplicationSpecSourcesDirectoryJsonnetTlas
 */
export interface ApplicationSpecSourcesDirectoryJsonnetTlas {
  /**
   * @schema ApplicationSpecSourcesDirectoryJsonnetTlas#code
   */
  readonly code?: boolean;

  /**
   * @schema ApplicationSpecSourcesDirectoryJsonnetTlas#name
   */
  readonly name: string;

  /**
   * @schema ApplicationSpecSourcesDirectoryJsonnetTlas#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourcesDirectoryJsonnetTlas' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcesDirectoryJsonnetTlas(obj: ApplicationSpecSourcesDirectoryJsonnetTlas | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'code': obj.code,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationSpecSourcesKustomizePatchesTarget
 */
export interface ApplicationSpecSourcesKustomizePatchesTarget {
  /**
   * @schema ApplicationSpecSourcesKustomizePatchesTarget#annotationSelector
   */
  readonly annotationSelector?: string;

  /**
   * @schema ApplicationSpecSourcesKustomizePatchesTarget#group
   */
  readonly group?: string;

  /**
   * @schema ApplicationSpecSourcesKustomizePatchesTarget#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationSpecSourcesKustomizePatchesTarget#labelSelector
   */
  readonly labelSelector?: string;

  /**
   * @schema ApplicationSpecSourcesKustomizePatchesTarget#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationSpecSourcesKustomizePatchesTarget#namespace
   */
  readonly namespace?: string;

  /**
   * @schema ApplicationSpecSourcesKustomizePatchesTarget#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourcesKustomizePatchesTarget' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationSpecSourcesKustomizePatchesTarget(obj: ApplicationSpecSourcesKustomizePatchesTarget | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotationSelector': obj.annotationSelector,
    'group': obj.group,
    'kind': obj.kind,
    'labelSelector': obj.labelSelector,
    'name': obj.name,
    'namespace': obj.namespace,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Number of replicas
 *
 * @schema ApplicationSpecSourcesKustomizeReplicasCount
 */
export class ApplicationSpecSourcesKustomizeReplicasCount {
  public static fromNumber(value: number): ApplicationSpecSourcesKustomizeReplicasCount {
    return new ApplicationSpecSourcesKustomizeReplicasCount(value);
  }
  public static fromString(value: string): ApplicationSpecSourcesKustomizeReplicasCount {
    return new ApplicationSpecSourcesKustomizeReplicasCount(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
 *
 * @schema ApplicationOperationSyncSourceDirectoryJsonnetExtVars
 */
export interface ApplicationOperationSyncSourceDirectoryJsonnetExtVars {
  /**
   * @schema ApplicationOperationSyncSourceDirectoryJsonnetExtVars#code
   */
  readonly code?: boolean;

  /**
   * @schema ApplicationOperationSyncSourceDirectoryJsonnetExtVars#name
   */
  readonly name: string;

  /**
   * @schema ApplicationOperationSyncSourceDirectoryJsonnetExtVars#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceDirectoryJsonnetExtVars' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourceDirectoryJsonnetExtVars(obj: ApplicationOperationSyncSourceDirectoryJsonnetExtVars | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'code': obj.code,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
 *
 * @schema ApplicationOperationSyncSourceDirectoryJsonnetTlas
 */
export interface ApplicationOperationSyncSourceDirectoryJsonnetTlas {
  /**
   * @schema ApplicationOperationSyncSourceDirectoryJsonnetTlas#code
   */
  readonly code?: boolean;

  /**
   * @schema ApplicationOperationSyncSourceDirectoryJsonnetTlas#name
   */
  readonly name: string;

  /**
   * @schema ApplicationOperationSyncSourceDirectoryJsonnetTlas#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceDirectoryJsonnetTlas' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourceDirectoryJsonnetTlas(obj: ApplicationOperationSyncSourceDirectoryJsonnetTlas | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'code': obj.code,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationOperationSyncSourceKustomizePatchesTarget
 */
export interface ApplicationOperationSyncSourceKustomizePatchesTarget {
  /**
   * @schema ApplicationOperationSyncSourceKustomizePatchesTarget#annotationSelector
   */
  readonly annotationSelector?: string;

  /**
   * @schema ApplicationOperationSyncSourceKustomizePatchesTarget#group
   */
  readonly group?: string;

  /**
   * @schema ApplicationOperationSyncSourceKustomizePatchesTarget#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationOperationSyncSourceKustomizePatchesTarget#labelSelector
   */
  readonly labelSelector?: string;

  /**
   * @schema ApplicationOperationSyncSourceKustomizePatchesTarget#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationOperationSyncSourceKustomizePatchesTarget#namespace
   */
  readonly namespace?: string;

  /**
   * @schema ApplicationOperationSyncSourceKustomizePatchesTarget#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceKustomizePatchesTarget' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourceKustomizePatchesTarget(obj: ApplicationOperationSyncSourceKustomizePatchesTarget | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotationSelector': obj.annotationSelector,
    'group': obj.group,
    'kind': obj.kind,
    'labelSelector': obj.labelSelector,
    'name': obj.name,
    'namespace': obj.namespace,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Number of replicas
 *
 * @schema ApplicationOperationSyncSourceKustomizeReplicasCount
 */
export class ApplicationOperationSyncSourceKustomizeReplicasCount {
  public static fromNumber(value: number): ApplicationOperationSyncSourceKustomizeReplicasCount {
    return new ApplicationOperationSyncSourceKustomizeReplicasCount(value);
  }
  public static fromString(value: string): ApplicationOperationSyncSourceKustomizeReplicasCount {
    return new ApplicationOperationSyncSourceKustomizeReplicasCount(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
 *
 * @schema ApplicationOperationSyncSourcesDirectoryJsonnetExtVars
 */
export interface ApplicationOperationSyncSourcesDirectoryJsonnetExtVars {
  /**
   * @schema ApplicationOperationSyncSourcesDirectoryJsonnetExtVars#code
   */
  readonly code?: boolean;

  /**
   * @schema ApplicationOperationSyncSourcesDirectoryJsonnetExtVars#name
   */
  readonly name: string;

  /**
   * @schema ApplicationOperationSyncSourcesDirectoryJsonnetExtVars#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcesDirectoryJsonnetExtVars' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcesDirectoryJsonnetExtVars(obj: ApplicationOperationSyncSourcesDirectoryJsonnetExtVars | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'code': obj.code,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
 *
 * @schema ApplicationOperationSyncSourcesDirectoryJsonnetTlas
 */
export interface ApplicationOperationSyncSourcesDirectoryJsonnetTlas {
  /**
   * @schema ApplicationOperationSyncSourcesDirectoryJsonnetTlas#code
   */
  readonly code?: boolean;

  /**
   * @schema ApplicationOperationSyncSourcesDirectoryJsonnetTlas#name
   */
  readonly name: string;

  /**
   * @schema ApplicationOperationSyncSourcesDirectoryJsonnetTlas#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcesDirectoryJsonnetTlas' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcesDirectoryJsonnetTlas(obj: ApplicationOperationSyncSourcesDirectoryJsonnetTlas | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'code': obj.code,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema ApplicationOperationSyncSourcesKustomizePatchesTarget
 */
export interface ApplicationOperationSyncSourcesKustomizePatchesTarget {
  /**
   * @schema ApplicationOperationSyncSourcesKustomizePatchesTarget#annotationSelector
   */
  readonly annotationSelector?: string;

  /**
   * @schema ApplicationOperationSyncSourcesKustomizePatchesTarget#group
   */
  readonly group?: string;

  /**
   * @schema ApplicationOperationSyncSourcesKustomizePatchesTarget#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationOperationSyncSourcesKustomizePatchesTarget#labelSelector
   */
  readonly labelSelector?: string;

  /**
   * @schema ApplicationOperationSyncSourcesKustomizePatchesTarget#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationOperationSyncSourcesKustomizePatchesTarget#namespace
   */
  readonly namespace?: string;

  /**
   * @schema ApplicationOperationSyncSourcesKustomizePatchesTarget#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcesKustomizePatchesTarget' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ApplicationOperationSyncSourcesKustomizePatchesTarget(obj: ApplicationOperationSyncSourcesKustomizePatchesTarget | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotationSelector': obj.annotationSelector,
    'group': obj.group,
    'kind': obj.kind,
    'labelSelector': obj.labelSelector,
    'name': obj.name,
    'namespace': obj.namespace,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Number of replicas
 *
 * @schema ApplicationOperationSyncSourcesKustomizeReplicasCount
 */
export class ApplicationOperationSyncSourcesKustomizeReplicasCount {
  public static fromNumber(value: number): ApplicationOperationSyncSourcesKustomizeReplicasCount {
    return new ApplicationOperationSyncSourcesKustomizeReplicasCount(value);
  }
  public static fromString(value: string): ApplicationOperationSyncSourcesKustomizeReplicasCount {
    return new ApplicationOperationSyncSourcesKustomizeReplicasCount(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

